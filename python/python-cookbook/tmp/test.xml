<?xml version="1.0"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/">

<channel>
	<title>Planet Python</title>
	<link>http://planetpython.org/</link>
	<language>en</language>
	<description>Planet Python - http://planetpython.org/</description>

<item>
	<title>Filipe Saraiva: if (LaKademy 2016) goto Rio de Janeiro</title>
	<guid>http://blog.filipesaraiva.info/?p=1825</guid>
	<link>http://blog.filipesaraiva.info/?p=1825</link>
	<description>&lt;p&gt;&lt;a href=&quot;http://blog.filipesaraiva.info/?attachment_id=1827&quot; rel=&quot;attachment wp-att-1827&quot;&gt;&lt;img class=&quot;aligncenter wp-image-1827&quot; src=&quot;http://blog.filipesaraiva.info/wp-content/uploads/2016/05/Zarpo-magazine-capa.jpg&quot; alt=&quot;&quot; width=&quot;710&quot; height=&quot;355&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Rio_de_Janeiro&quot; target=&quot;_blank&quot;&gt;Rio de Janeiro&lt;/a&gt;, the &amp;#8220;Cidade Maravilhosa&amp;#8221;, land of the eternal Summer. The sunlight here is always clear and hot, the sea is refreshing, the sand is comfortable. The people is happy, Rio de Janeiro has good music, food, the craziest parties of the world, and beautiful bodies having fun with beach games (do you know &lt;a href=&quot;https://www.youtube.com/watch?v=nnvgaClwMzc&quot; target=&quot;_blank&quot;&gt;futevolei&lt;/a&gt;?).&lt;/p&gt;
&lt;p&gt;But while Rio de Janeiro is &lt;span id=&quot;result_box&quot; class=&quot;short_text&quot; lang=&quot;en&quot;&gt;&lt;span class=&quot;&quot;&gt;boiling&lt;/span&gt;&lt;/span&gt;, some Gearheads based in Latin America will be working together in a cold and dark room in the city, attending to our &amp;#8220;multi-area&amp;#8221; sprint named Latin America Akademy &amp;#8211; &lt;a href=&quot;https://br.kde.org/lakademy2016&quot; target=&quot;_blank&quot;&gt;LaKademy 2016&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In my plans I have a lot of work to do in &lt;a href=&quot;https://edu.kde.org/cantor/&quot; target=&quot;_blank&quot;&gt;Cantor&lt;/a&gt;, including a strong triage in bugs and several tests with some &lt;a href=&quot;https://en.wikipedia.org/wiki/Inter-process_communication&quot; target=&quot;_blank&quot;&gt;IPC&lt;/a&gt; technologies. I would like to choose one to be the &amp;#8220;official&amp;#8221; technology to implement backends for Cantor. Cantor needs a IPC technology with good multiplatform support for the main desktop operating systems. I am think about DBus&amp;#8230; do you have other suggestions or tips?&lt;/p&gt;
&lt;p&gt;Other contributors also want to work in Cantor. Wagner wants to build and test the application in Windows and begin an implementation of a backend for a new programming language. Fernando, my SoK 2015 student, wants to fix the R backend. I will be very happy seeing these developers dirtying their hands in Cantor source code, so I will help them in those tasks.&lt;/p&gt;
&lt;p&gt;During LaKademy I intent to present for the &lt;span id=&quot;result_box&quot; class=&quot;short_text&quot; lang=&quot;en&quot;&gt;&lt;span class=&quot;alt-edited&quot;&gt;attendees&lt;/span&gt;&lt;/span&gt; some ideas and prototypes of two new software I am working. I expect to get some feedback and I will think about the next steps for them. Maybe I can submit them for new KDE projects&amp;#8230; Well, let&amp;#8217;s see. &lt;img src=&quot;https://s.w.org/images/core/emoji/72x72/1f642.png&quot; alt=&quot;&amp;#x1f642;&quot; class=&quot;wp-smiley&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Wait for more news from the cold and dark room of our LaKademy event in Rio de Janeiro. &lt;img src=&quot;https://s.w.org/images/core/emoji/72x72/1f642.png&quot; alt=&quot;&amp;#x1f642;&quot; class=&quot;wp-smiley&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.filipesaraiva.info/?attachment_id=1826&quot; rel=&quot;attachment wp-att-1826&quot;&gt;&lt;img class=&quot;aligncenter wp-image-1826 &quot; src=&quot;http://blog.filipesaraiva.info/wp-content/uploads/2016/05/lakademy2016_0.png&quot; width=&quot;683&quot; height=&quot;429&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Tue, 24 May 2016 23:46:58 +0000</pubDate>
</item>
<item>
	<title>Carl Chenet: Tweet your database with db2twitter</title>
	<guid></guid>
	<link></link>
	<description>Follow me also on Diaspora* or Twitter  You have a database (MySQL, PostgreSQL, see supported database types), a tweet pattern and wants to automatically tweet on a regular basis? No need for RSS, fancy tricks, 3rd party website to translate RSS to Twitter or whatever. Just use db2twitter. A quick example of a tweet generated&amp;#8230; &lt;a href=&quot;http://carlchenet.com/2016/05/25/tweet-your-database-with-db2twitter/&quot; class=&quot;more-link&quot;&gt;Continuer de lire &lt;span class=&quot;screen-reader-text&quot;&gt;Tweet your database with&amp;#160;db2twitter&lt;/span&gt;&lt;/a&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;https://pixel.wp.com/b.gif?host=carlchenet.com&amp;blog=7722010&amp;post=4168&amp;subd=carlchenet&amp;ref=&amp;feed=1&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 24 May 2016 22:00:51 +0000</pubDate>
</item>
<item>
	<title>Mahmoud Hashemi: Managing Python Ecosystems</title>
	<guid>http://sedimental.org/managing_python_ecosystems.html</guid>
	<link>http://sedimental.org/managing_python_ecosystems.html</link>
	<description>&lt;p&gt;&lt;p&gt;&lt;img src=&quot;http://sedimental.org/uploads/illo/koi_fish_med.png&quot; align=&quot;right&quot; title=&quot;Ecosystems as shimmery, shiny, scaley, and fishy as a koi.&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;
&lt;p&gt;You know that old quote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The wider the net you cast, the wider the variety you catch.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Was it a wise old fisherman? Or a dogged Python programmer? Either
way, words don't come much truer than those.&lt;/p&gt;
&lt;p&gt;Few, if any, programming languages have embodied the description
&quot;general-purpose&quot; as wholly as Python. And with the wide net of that
applicability comes a wide variety in use -- and environments.&lt;/p&gt;
&lt;p&gt;Library and framework developers rarely get to control how their code
is used, and thus have to think about how their code fits into the
whole ecosystem. From writing hybrid code for Python 2 &lt;em&gt;and&lt;/em&gt; 3 to
inserting shims for Pythons without threading support, there's no rest
for the rigorous. Until now.&lt;/p&gt;
&lt;h3 id=&quot;announcing_ecoutils&quot;&gt;&lt;a class=&quot;toclink&quot; href=&quot;http://sedimental.org/managing_python_ecosystems.html#announcing_ecoutils&quot;&gt;Announcing &lt;code&gt;ecoutils&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Ecosystems differ. Widely. Academic Python tends to be more
Windows-heavy, corporate Python will probably forever be entrenched in
Python 2, and one can never predict the arrival of that oddball user
with the super old version of Python on &lt;a href=&quot;https://en.wikipedia.org/wiki/Cygwin&quot;&gt;Cygwin&lt;/a&gt;. But these
are generalities and we can do better.&lt;/p&gt;
&lt;p&gt;Enter &lt;a href=&quot;http://boltons.readthedocs.io/en/latest/ecoutils.html&quot;&gt;&lt;code&gt;ecoutils&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;ecoutils&lt;/code&gt; is a pure-Python module
that, using nothing but builtins, generates a semantic, Python-centric
profile of the environment that's running it. This includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Host operating system&lt;/strong&gt;: Windows, OS X, Ubuntu, Debian, CentOS, RHEL, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Language version&lt;/strong&gt;: 2.5, 2.6, 2.7, ..., 3.4, 3.5, ..., etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Executable runtime&lt;/strong&gt;: CPython, PyPy, Jython, etc., (plus build date and compiler)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Features&lt;/strong&gt;: 64-bit, IPv6, Unicode character support (UCS-2/UCS-4)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Built-in library support&lt;/strong&gt;: OpenSSL, threading, SQLite, zlib, and more&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;User environment&lt;/strong&gt;: umask, ulimit, working directory&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Machine info&lt;/strong&gt;: CPU count, hostname, filesystem encoding&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://sedimental.org/uploads/illo/green_field_med.png&quot; align=&quot;right&quot; title=&quot;If only all fields were so green in software ecosystems.&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Now, instead of crossing platform support bridges when users bring
them to you, you can be proactive. Now, instead of guessing how
developers are using the code, you can design for their needs and
watch those needs change.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ecoutils&lt;/code&gt; only gets more valuable when code goes to production. If you
manage your own machines, you know the risk of version drift and
missed boxes only goes up with machine number and time. If you don't
manage your machines, it's just a matter of time until someone is
being trained on your boxes.&lt;/p&gt;
&lt;p&gt;So what does a profile look like?&lt;/p&gt;
&lt;h3 id=&quot;generating_a_profile&quot;&gt;&lt;a class=&quot;toclink&quot; href=&quot;http://sedimental.org/managing_python_ecosystems.html#generating_a_profile&quot;&gt;Generating a profile&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Profiles are generated by &lt;a href=&quot;http://boltons.readthedocs.io/en/latest/ecoutils.html#boltons.ecoutils.get_profile&quot;&gt;&lt;code&gt;ecoutils.get_profile()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When run as a module, &lt;code&gt;ecoutils&lt;/code&gt; calls &lt;code&gt;get_profile()&lt;/code&gt; and prints a
JSON-formatted profile. On my fully-updated Ubuntu 14.04LTS machine,
&lt;code&gt;python -m boltons.ecoutils&lt;/code&gt; yields:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;{
  &lt;span&gt;&quot;_eco_version&quot;&lt;/span&gt;: &lt;span&gt;&quot;1.0.0&quot;&lt;/span&gt;,
  &lt;span&gt;&quot;cpu_count&quot;&lt;/span&gt;: &lt;span&gt;4&lt;/span&gt;,
  &lt;span&gt;&quot;cwd&quot;&lt;/span&gt;: &lt;span&gt;&quot;/home/mahmoud/projects/boltons&quot;&lt;/span&gt;,
  &lt;span&gt;&quot;fs_encoding&quot;&lt;/span&gt;: &lt;span&gt;&quot;UTF-8&quot;&lt;/span&gt;,
  &lt;span&gt;&quot;guid&quot;&lt;/span&gt;: &lt;span&gt;&quot;6b139e7bbf5ad4ed8d4063bf6235b4d2&quot;&lt;/span&gt;,
  &lt;span&gt;&quot;hostfqdn&quot;&lt;/span&gt;: &lt;span&gt;&quot;mahmoud-host&quot;&lt;/span&gt;,
  &lt;span&gt;&quot;hostname&quot;&lt;/span&gt;: &lt;span&gt;&quot;mahmoud-host&quot;&lt;/span&gt;,
  &lt;span&gt;&quot;linux_dist_name&quot;&lt;/span&gt;: &lt;span&gt;&quot;Ubuntu&quot;&lt;/span&gt;,
  &lt;span&gt;&quot;linux_dist_version&quot;&lt;/span&gt;: &lt;span&gt;&quot;14.04&quot;&lt;/span&gt;,
  &lt;span&gt;&quot;python&quot;&lt;/span&gt;: {
    &lt;span&gt;&quot;argv&quot;&lt;/span&gt;: &lt;span&gt;&quot;boltons/ecoutils.py&quot;&lt;/span&gt;,
    &lt;span&gt;&quot;bin&quot;&lt;/span&gt;: &lt;span&gt;&quot;/usr/bin/python&quot;&lt;/span&gt;,
    &lt;span&gt;&quot;build_date&quot;&lt;/span&gt;: &lt;span&gt;&quot;Jun 22 2015 17:58:13&quot;&lt;/span&gt;,
    &lt;span&gt;&quot;compiler&quot;&lt;/span&gt;: &lt;span&gt;&quot;GCC 4.8.2&quot;&lt;/span&gt;,
    &lt;span&gt;&quot;features&quot;&lt;/span&gt;: {
      &lt;span&gt;&quot;64bit&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;,
      &lt;span&gt;&quot;expat&quot;&lt;/span&gt;: &lt;span&gt;&quot;expat_2.1.0&quot;&lt;/span&gt;,
      &lt;span&gt;&quot;ipv6&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;,
      &lt;span&gt;&quot;openssl&quot;&lt;/span&gt;: &lt;span&gt;&quot;OpenSSL 1.0.1f 6 Jan 2014&quot;&lt;/span&gt;,
      &lt;span&gt;&quot;readline&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;,
      &lt;span&gt;&quot;sqlite&quot;&lt;/span&gt;: &lt;span&gt;&quot;3.8.2&quot;&lt;/span&gt;,
      &lt;span&gt;&quot;threading&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;,
      &lt;span&gt;&quot;tkinter&quot;&lt;/span&gt;: &lt;span&gt;&quot;8.6&quot;&lt;/span&gt;,
      &lt;span&gt;&quot;unicode_wide&quot;&lt;/span&gt;: &lt;span&gt;true&lt;/span&gt;,
      &lt;span&gt;&quot;zlib&quot;&lt;/span&gt;: &lt;span&gt;&quot;1.2.8&quot;&lt;/span&gt;
    },
    &lt;span&gt;&quot;version&quot;&lt;/span&gt;: &lt;span&gt;&quot;2.7.6 (default, Jun 22 2015, 17:58:13) [GCC 4.8.2]&quot;&lt;/span&gt;,
    &lt;span&gt;&quot;version_info&quot;&lt;/span&gt;: [
      &lt;span&gt;2&lt;/span&gt;,
      &lt;span&gt;7&lt;/span&gt;,
      &lt;span&gt;6&lt;/span&gt;,
      &lt;span&gt;&quot;final&quot;&lt;/span&gt;,
      &lt;span&gt;0&lt;/span&gt;
    ]
  },
  &lt;span&gt;&quot;time_utc&quot;&lt;/span&gt;: &lt;span&gt;&quot;2016-05-24 07:59:40.473140&quot;&lt;/span&gt;,
  &lt;span&gt;&quot;time_utc_offset&quot;&lt;/span&gt;: &lt;span&gt;-8.0&lt;/span&gt;,
  &lt;span&gt;&quot;ulimit_hard&quot;&lt;/span&gt;: &lt;span&gt;4096&lt;/span&gt;,
  &lt;span&gt;&quot;ulimit_soft&quot;&lt;/span&gt;: &lt;span&gt;1024&lt;/span&gt;,
  &lt;span&gt;&quot;umask&quot;&lt;/span&gt;: &lt;span&gt;&quot;002&quot;&lt;/span&gt;,
  &lt;span&gt;&quot;uname&quot;&lt;/span&gt;: {
    &lt;span&gt;&quot;machine&quot;&lt;/span&gt;: &lt;span&gt;&quot;x86_64&quot;&lt;/span&gt;,
    &lt;span&gt;&quot;node&quot;&lt;/span&gt;: &lt;span&gt;&quot;mahmoud-host&quot;&lt;/span&gt;,
    &lt;span&gt;&quot;processor&quot;&lt;/span&gt;: &lt;span&gt;&quot;x86_64&quot;&lt;/span&gt;,
    &lt;span&gt;&quot;release&quot;&lt;/span&gt;: &lt;span&gt;&quot;3.13.0-85-generic&quot;&lt;/span&gt;,
    &lt;span&gt;&quot;system&quot;&lt;/span&gt;: &lt;span&gt;&quot;Linux&quot;&lt;/span&gt;,
    &lt;span&gt;&quot;version&quot;&lt;/span&gt;: &lt;span&gt;&quot;#129-Ubuntu SMP Thu Mar 17 20:50:15 UTC 2016&quot;&lt;/span&gt;
  },
  &lt;span&gt;&quot;username&quot;&lt;/span&gt;: &lt;span&gt;&quot;mahmoud&quot;&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Weighing in at just over 1KB, it's not too daunting! ecoutils is part
of &lt;a href=&quot;http://boltons.readthedocs.io/en/latest/&quot;&gt;the boltons package&lt;/a&gt;, so &lt;code&gt;pip install boltons&lt;/code&gt; and
see how yours compares.&lt;/p&gt;
&lt;p&gt;By virtue of being in boltons, the &lt;code&gt;ecoutils&lt;/code&gt; module is also fully
standalone, and can be used without the rest of the boltons
package. ecoutils has been tested with Python 2.6, 2.7, 3.4, 3.5, and
PyPy on Ubuntu, Debian, RHEL, OS X, FreeBSD, and
Windows. &lt;a href=&quot;https://github.com/mahmoud/boltons/issues&quot;&gt;File an issue&lt;/a&gt; if something seems to be
broken. Compatibility is the goal.&lt;/p&gt;
&lt;h3 id=&quot;transmission_and_collection&quot;&gt;&lt;a class=&quot;toclink&quot; href=&quot;http://sedimental.org/managing_python_ecosystems.html#transmission_and_collection&quot;&gt;Transmission and collection&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now, ecoutils is really just part of the solution. Sure you can write
out a quick profile it at the top of every log file, and you won't
regret it. However, real ecosystem management means running a sort of
Python analytics shop.&lt;/p&gt;
&lt;p&gt;For those familiar with browsing the Internet, your browser is a
virtual machine that has likely been participating in a similar
arrangement all day today. Like Google Analytics or &lt;a href=&quot;http://piwik.org/&quot;&gt;Piwik&lt;/a&gt;,
the setup involves collecting relevant data, and then sending it to a
central server for storage and querying.&lt;/p&gt;
&lt;p&gt;Collection is handled by &lt;code&gt;ecoutils&lt;/code&gt;. As far as transmission is
concerned, in development environments, we have a dead-simple,
side-effect-minimizing, single-file HTTP client that sends &lt;code&gt;ecoutils&lt;/code&gt;
profiles to a central analytics server on application startup.&lt;/p&gt;
&lt;p&gt;In production environments, our framework serves this information for
queries on a special port, through &lt;a href=&quot;https://github.com/paypal/support&quot;&gt;SuPPort&lt;/a&gt;'s MetaService,
through &lt;a href=&quot;https://github.com/mahmoud/clastic#clastic&quot;&gt;clastic&lt;/a&gt;'s &lt;a href=&quot;https://github.com/mahmoud/clastic/blob/master/clastic/meta.py&quot;&gt;MetaApplication&lt;/a&gt;, where this
all started. Here's &lt;a href=&quot;http://tools.wmflabs.org/hashtags/meta/&quot;&gt;an example of it&lt;/a&gt; running in
&lt;a href=&quot;http://tools.wmflabs.org/hashtags/&quot;&gt;Wikipedia Hashtags Search&lt;/a&gt;, on a
&lt;a href=&quot;https://www.mediawiki.org/wiki/Wikimedia_Labs&quot;&gt;managed Wikimedia environment&lt;/a&gt;, over which I have minimal
control, and need maximum information.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a class=&quot;footnote-ref&quot; href=&quot;http://sedimental.org/managing_python_ecosystems.html#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Push or pull, all the data is stored in a simple SQL (or JSONL)
format, as demonstrated by &lt;a href=&quot;https://github.com/mahmoud/espymetrics/&quot;&gt;espymetrics&lt;/a&gt;, the example
project for my &lt;a href=&quot;http://sedimental.orgshop.oreilly.com/product/0636920047346.do&quot;&gt;Enterprise Software with Python&lt;/a&gt; course. Nothing
more enterprise than having literally dozens of environments by
design, and even more than that by debt.&lt;/p&gt;
&lt;p&gt;One last note, data management is all about audience and context. If
you're an administrator in a professional setting, the data above is
great. But there are understandably some cases where you might want
something less identifiable. &lt;code&gt;get_profile&lt;/code&gt; has a &lt;code&gt;scrub&lt;/code&gt; flag that
handles that. See &lt;a href=&quot;http://boltons.readthedocs.io/en/latest/ecoutils.html#boltons.ecoutils.get_profile&quot;&gt;the docs&lt;/a&gt; for details.&lt;/p&gt;
&lt;h3 id=&quot;success_stories&quot;&gt;&lt;a class=&quot;toclink&quot; href=&quot;http://sedimental.org/managing_python_ecosystems.html#success_stories&quot;&gt;Success stories&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Originally designed for easier remote administration across multiple
environments, a little bit of info has had far-reaching impacts. For a
few examples from my work at PayPal, this approach enabled us to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Deprecate and remove production Python 2.6 support from our
  framework, simplifying our build matrix without customer impact.&lt;/li&gt;
&lt;li&gt;Actively engage new users attempting to use our framework with
  unsupported Pythons or OSes.&lt;/li&gt;
&lt;li&gt;Improve utilization through designing for observed CPU counts.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In practice, &lt;code&gt;ecoutils&lt;/code&gt; combines well with &lt;a href=&quot;https://github.com/giampaolo/psutil&quot;&gt;psutil&lt;/a&gt; data to
go even further in utilization.&lt;/p&gt;
&lt;h3 id=&quot;building_for_variation&quot;&gt;&lt;a class=&quot;toclink&quot; href=&quot;http://sedimental.org/managing_python_ecosystems.html#building_for_variation&quot;&gt;Building for variation&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Some of you probably came here expecting to read yet another great
post about &lt;a href=&quot;https://virtualenv.pypa.io/en/stable/&quot;&gt;virtualenv&lt;/a&gt;, &lt;a href=&quot;https://tox.readthedocs.io/en/latest/&quot;&gt;tox&lt;/a&gt;, and maybe even
&lt;a href=&quot;http://conda.pydata.org/docs/using/envs.html&quot;&gt;conda envs&lt;/a&gt;. I'm glad you've already heard of them,
because they're a big part of the story. If you haven't yet explored
these tools, check them out, because they are invaluable for
cross-version Python testing and packaging.&lt;/p&gt;
&lt;p&gt;Also, if you're working on an open-source library, I can vouch for
&lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis CI&lt;/a&gt; (Linux) and &lt;a href=&quot;https://www.appveyor.com/&quot;&gt;Appveyor&lt;/a&gt; (Windows) as
very valuable providers for cross-platform testing. I use both of them
on &lt;a href=&quot;https://github.com/mahmoud/boltons&quot;&gt;boltons&lt;/a&gt;, and it makes it easier, not harder, for
contributors to submit pull requests with confidence. Most outfits
can't afford to have a team member leading support for each platform,
like we do at PayPal.&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;&lt;a class=&quot;toclink&quot; href=&quot;http://sedimental.org/managing_python_ecosystems.html#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Python is more than just an expressive, succinct programming
language. In a diverse world, Python is a tremendous force, made so by
its wide deployment, cross-platform support, and external library
integrations. Python gives you SQLite, JSON, SSL, Unicode, and much
more, but with many necessary strings attached to Python version,
build, or environment. &lt;code&gt;ecoutils&lt;/code&gt; offers an experienced look at the
real features that affect the value of Python components and teams.&lt;/p&gt;
&lt;p&gt;Don't leave ecosystems and their constituents to chance, whim, or
fad. Collect the data that makes your ecosystem unique, and make
measured decisions based on the realest demand: actual usage.&lt;/p&gt;
&lt;div class=&quot;footnote&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn:1&quot;&gt;
&lt;p&gt;When that server seems slow, remember to
  &lt;a href=&quot;https://wikimediafoundation.org/wiki/Ways_to_Give&quot;&gt;donate to Wikipedia&lt;/a&gt;. And maybe volunteer, because
  money alone does not make servers run fast. &lt;a class=&quot;footnote-backref&quot; href=&quot;http://sedimental.org/managing_python_ecosystems.html#fnref:1&quot; rev=&quot;footnote&quot; title=&quot;Jump back to footnote 1 in the text&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;p&gt;&lt;/p&gt;



&lt;hr /&gt;&lt;/p&gt;</description>
	<pubDate>Tue, 24 May 2016 17:00:00 +0000</pubDate>
</item>
<item>
	<title>Real Python: Getting Started with the Slack API using Python and Flask</title>
	<guid>https://realpython.com/blog/python/getting-started-with-the-slack-api-using-python-and-flask/</guid>
	<link>https://realpython.com/blog/python/getting-started-with-the-slack-api-using-python-and-flask/</link>
	<description>&lt;p&gt;The slick hosted chat application &lt;a href=&quot;https://slack.com/&quot;&gt;Slack&lt;/a&gt; is all the rage this year. The tool&amp;rsquo;s adoption isn&amp;rsquo;t empty hype &amp;ndash; it&amp;rsquo;s incredibly useful for communicating with and learning from fellow developers. For example, software developer communities such as &lt;a href=&quot;https://pythoncommunity.herokuapp.com/&quot;&gt;DC Python&lt;/a&gt;, &lt;a href=&quot;http://dfwdevs.org/&quot;&gt;Dallas-Forth Worth Devs&lt;/a&gt;, and &lt;a href=&quot;http://denverdevs.org/&quot;&gt;Denver Devs&lt;/a&gt; set up their own Slack channels.&lt;/p&gt;

&lt;p&gt;However, Slack wouldn&amp;rsquo;t be that useful if it was just a glorified AOL Instant Messenger. It&amp;rsquo;s the programmatic access to retrieve and send messages with the Slack web application programming interface (API) where the power really kicks in.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In this post, we&amp;rsquo;ll see how to work with Slack via the API and the official SlackClient Python helper library.&lt;/strong&gt; We will grab an API access token and write some Python code to list, retrieve and send data through the API. Let&amp;rsquo;s dig in now!&lt;/p&gt;

&lt;div class=&quot;center-text&quot;&gt;
  &lt;img class=&quot;no-border&quot; src=&quot;https://realpython.com/images/blog_images/slack-api/slack-python-flask.png&quot; alt=&quot;Slack Python Flask&quot; /&gt;
&lt;/div&gt;




&lt;br /&gt;


&lt;p&gt;&lt;em&gt;This is a guest blog post by &lt;a href=&quot;http://www.mattmakai.com/&quot;&gt;Matt Makai&lt;/a&gt;​, Developer Evangelist at &lt;a href=&quot;https://www.twilio.com/&quot;&gt;Twilio&lt;/a&gt; and author of &lt;a href=&quot;http://www.fullstackpython.com/&quot;&gt;Full Stack Python&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;a name=&quot;Tools.We...ll.Need&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Tools We’ll Need&lt;/h2&gt;

&lt;p&gt;Several tools will be used to run the code in this blog post, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;a href=&quot;https://slack.com/&quot;&gt;free Slack account with a team on which you have API access&lt;/a&gt; or sign up for the &lt;a href=&quot;http://dev4slack.xoxco.com/&quot;&gt;Slack Developer Hangout team&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Either Python 2 or 3&lt;/li&gt;
&lt;li&gt;Official Python &lt;a href=&quot;https://github.com/slackhq/python-slackclient&quot;&gt;slackclient&lt;/a&gt; code library built by the Slack team&lt;/li&gt;
&lt;li&gt;Slack API &lt;a href=&quot;https://api.slack.com/docs/oauth-test-tokens&quot;&gt;testing token&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://flask.pocoo.org/&quot;&gt;Flask web micro-framework&lt;/a&gt;; if you&amp;rsquo;re unfamiliar with it, check out the &lt;a href=&quot;https://realpython.com/courses/&quot;&gt;Real Python course&lt;/a&gt;, the &lt;a href=&quot;https://realpython.com/blog/python/flask-by-example-part-1-project-setup/&quot;&gt;Flask by Example series&lt;/a&gt;, or &lt;a href=&quot;https://www.fullstackpython.com/flask.html&quot;&gt;Full Stack Python&amp;rsquo;s Flask page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;It&amp;rsquo;s also handy to have the &lt;a href=&quot;https://api.slack.com/web&quot;&gt;Slack API docs&lt;/a&gt; open for reference. You can follow along by writing the code in this post or &lt;a href=&quot;https://github.com/makaimc/slack-api-python-examples&quot;&gt;clone the companion GitHub repository with the finished project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now that we know what tools we need to use, let’s begin by creating a new &lt;a href=&quot;https://realpython.com/blog/python/python-virtual-environments-a-primer/&quot;&gt;virtualenv&lt;/a&gt; to isolate our application dependencies from other Python projects you’re working on:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir slackapi
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;virtualenv venv
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;Activate the virtualenv:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;venv/bin/activate
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;Depending on how your virtualenv and shell are set up, your prompt should now look something like this:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;venv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;Keep the shell open for now as we get our Slack access established via the official slackclient API helper library built by Slack.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;There are also other fantastic Python helper libraries created by the community. For simplicity, we’re only going to install and use slackclient, but you can also try out libraries like &lt;a href=&quot;https://github.com/os/slacker&quot;&gt;slacker&lt;/a&gt;, &lt;a href=&quot;https://github.com/kn/slack&quot;&gt;slack&lt;/a&gt; and &lt;a href=&quot;https://github.com/loisaidasam/pyslack&quot;&gt;pyslack&lt;/a&gt; once we’re done here.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Install the slackclient helper library into your virtualenv with pip:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip install &lt;span class=&quot;nv&quot;&gt;slackclient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;1.0.0
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;Now that we have the helper library installed, we need to obtain a Slack access token for our team and account.&lt;/p&gt;

&lt;a name=&quot;The.Slack.Web.API&quot;&gt;&lt;/a&gt;
&lt;h2&gt;The Slack Web API&lt;/h2&gt;

&lt;p&gt;Head to the &lt;a href=&quot;https://api.slack.com/web&quot;&gt;landing page for the Slack Web API&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;center-text&quot;&gt;
  &lt;img class=&quot;no-border&quot; src=&quot;https://realpython.com/images/blog_images/slack-api/slack-sign-in.png&quot; alt=&quot;Slack Sign In&quot; /&gt;
&lt;/div&gt;




&lt;br /&gt;


&lt;p&gt;Once you’ve signed in you can scroll down on the web API page where you’ll see a button to generate test tokens:&lt;/p&gt;

&lt;div class=&quot;center-text&quot;&gt;
  &lt;img class=&quot;no-border&quot; src=&quot;https://realpython.com/images/blog_images/slack-api/slack-generate-test-token.png&quot; alt=&quot;Slack Test Token&quot; /&gt;
&lt;/div&gt;




&lt;br /&gt;


&lt;p&gt;Generate a test token for a Slack team on which you have administrative privileges. This token will serve fine for our development purposes in this blog post, but you can also &lt;a href=&quot;https://api.slack.com/docs/oauth-test-tokens&quot;&gt;create an OAuth flow&lt;/a&gt; where other users can generate tokens for authentication through their own accounts.&lt;/p&gt;

&lt;p&gt;We’ll need that test token in just a moment, so keep it handy. Let’s switch into our Python environment set up so we can try out the API. With your virtualenv still active, fire up the Python REPL:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;venv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;Python 3.5.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;v3.5.0:374f501f4567, Sep 12 2015, 11:00:19&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;GCC 4.2.1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Apple Inc. build 5666&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;dot 3&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt; on darwin
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;Type &lt;span class=&quot;s2&quot;&gt;&amp;quot;help&amp;quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; or &lt;span class=&quot;s2&quot;&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;more information.
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;Let’s test our API token with a test call; type the following code at the REPL prompt:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; from slackclient import SlackClient
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;nv&quot;&gt;slack_client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; SlackClient&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'your test token here'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; slack_client.api_call&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;api.test&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;The REPL should return back something like the following dictionary if your API test with the token was successful:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;u&lt;span class=&quot;s1&quot;&gt;'args'&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;u&lt;span class=&quot;s1&quot;&gt;'token'&lt;/span&gt;: u&lt;span class=&quot;s1&quot;&gt;'xoxp-361113305843-7621238052-8691112296227-d0d4824abe'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, u&lt;span class=&quot;s1&quot;&gt;'ok'&lt;/span&gt;: True&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;If you get back &lt;code&gt;{u'ok': False, u'error': u'invalid_auth'}&lt;/code&gt; then double-check that you copied the Slack token correctly into the second line entered on the REPL.&lt;/p&gt;

&lt;p&gt;Enter one more quick test for our authentication with another line of code in the REPL:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt; slack_client.api_call&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;auth.test&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;You should see another dictionary similar to this one:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;u&lt;span class=&quot;s1&quot;&gt;'user_id'&lt;/span&gt;: u&lt;span class=&quot;s1&quot;&gt;'U0S77S29J'&lt;/span&gt;, u&lt;span class=&quot;s1&quot;&gt;'url'&lt;/span&gt;: u&lt;span class=&quot;s1&quot;&gt;'https://fullstackguides.slack.com/'&lt;/span&gt;, u&lt;span class=&quot;s1&quot;&gt;'team_id'&lt;/span&gt;: u&lt;span class=&quot;s1&quot;&gt;'T0S8V1ZQA'&lt;/span&gt;, u&lt;span class=&quot;s1&quot;&gt;'user'&lt;/span&gt;: u&lt;span class=&quot;s1&quot;&gt;'matt'&lt;/span&gt;, u&lt;span class=&quot;s1&quot;&gt;'team'&lt;/span&gt;: u&lt;span class=&quot;s1&quot;&gt;'Full Stack Guides, u'&lt;/span&gt;ok&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;: True&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;Awesome! We&amp;rsquo;re authorized to start using the Slack API through our account. Now the fun begins as we can start programmatically obtaining Slack data and handling messages!&lt;/p&gt;

&lt;a name=&quot;Slack.API.Basics&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Slack API Basics&lt;/h2&gt;

&lt;p&gt;Exit out of the REPL with a quick CTRL-d or &lt;code&gt;exit()&lt;/code&gt; command. Back on the command line, export the Slack token as an environment variable:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;venv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SLACK_TOKEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'your slack token pasted here'&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;We&amp;rsquo;ll snag the environment variable in our Python script using the &lt;code&gt;os&lt;/code&gt; module instead of hardcoding it into the source code.&lt;/p&gt;

&lt;p&gt;Dive into your favorite text editor such as &lt;a href=&quot;https://realpython.com/blog/python/vim-and-python-a-match-made-in-heaven/&quot;&gt;Vim&lt;/a&gt;, &lt;a href=&quot;https://realpython.com/blog/python/emacs-the-best-python-editor/&quot;&gt;Emacs&lt;/a&gt;, or &lt;a href=&quot;https://realpython.com/blog/python/setting-up-sublime-text-3-for-full-stack-python-development/&quot;&gt;Sublime Text&lt;/a&gt; so we can cut some new Python code. Create a new file named &lt;em&gt;app.py&lt;/em&gt; and start filling it out with the following imports:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;slackclient&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SlackClient&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;Again, the &lt;code&gt;os&lt;/code&gt; module will be used to pull the &lt;code&gt;SLACK_TOKEN&lt;/code&gt; environment variable we just exported. The SlackClient import should look familiar, as it is the same line we wrote earlier on the REPL:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;SLACK_TOKEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'SLACK_TOKEN'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;slack_client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SlackClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SLACK_TOKEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;In the above two lines, we snag the &lt;code&gt;SLACK_TOKEN&lt;/code&gt; environment variable value and instantiate the SlackClient helper library. Next let&amp;rsquo;s create a function to list channels via an API call. Slack returns back the results in a dictionary with two keys: &lt;code&gt;ok&lt;/code&gt; and &lt;code&gt;channels&lt;/code&gt;. &lt;code&gt;ok&lt;/code&gt; allows us to know if the API call was successful, and if its value is &lt;code&gt;True&lt;/code&gt; then &lt;code&gt;channels&lt;/code&gt; contains the data we need on the list of channels.&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;list_channels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;channels_call&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slack_client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;api_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;channels.list&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channels_call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ok'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channels_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'channels'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;Finally, let&amp;rsquo;s add a convenience main function that will allow us to print all the channels when we invoke the Python file with &lt;code&gt;python app.py&lt;/code&gt; on the command line:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;channels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_channels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Channels: &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; (&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Unable to authenticate.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;That&amp;rsquo;s all the code we need for the moment. Time to give it a try. Execute the script from the command line with &lt;code&gt;python app.py&lt;/code&gt;. You&amp;rsquo;ll see output like the following channels list:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;line&quot;&gt;Channels:
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;general &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;C0S82S5RS&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;python &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;C0S8HABL3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;random &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;C0S8F4432&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;What is the channel ID that we printed out in parentheses next the the channel name for? Slack&amp;rsquo;s API needs a unique reference for channels, so we use the ID, not the name, as an identifier instead of the human-readable channel name.&lt;/p&gt;

&lt;p&gt;We can write some code that uses the &lt;a href=&quot;https://api.slack.com/methods/channels.info&quot;&gt;channel.info API method&lt;/a&gt; to obtain data for a specific channel based on its ID.&lt;/p&gt;

&lt;p&gt;Add a new function along with a few new lines in main to output the latest message from each channel, which is only available in the more detailed &lt;code&gt;channel.info&lt;/code&gt; API call.&lt;/p&gt;

&lt;p&gt;Updated code:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;28&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;29&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;30&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;31&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;32&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;33&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;34&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;line&quot;&gt;import os
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;from slackclient import SlackClient
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nv&quot;&gt;SLACK_TOKEN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; os.environ.get&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SLACK_TOKEN'&lt;/span&gt;, None&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nv&quot;&gt;slack_client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; SlackClient&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SLACK_TOKEN&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;def list_channels&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;:
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nv&quot;&gt;channels_call&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; slack_client.api_call&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;channels.list&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;channels_call&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ok'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;:
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;channels_call&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'channels'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;None
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;def channel_info&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;channel_id&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nv&quot;&gt;channel_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; slack_client.api_call&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;channels.info&amp;quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;channel_id&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;channel_info:
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;channel_info&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'channel'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;None
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'__main__'&lt;/span&gt;:
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;nv&quot;&gt;channels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; list_channels&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;channels:
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Channels: &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;c in channels:
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; + &lt;span class=&quot;s2&quot;&gt;&amp;quot; (&amp;quot;&lt;/span&gt; + c&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; + &lt;span class=&quot;s2&quot;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;nv&quot;&gt;detailed_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; channel_info&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;detailed_info:
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;detailed_info&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'latest'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'text'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Unable to authenticate.&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;blockquote&gt;&lt;p&gt;Note that with this code we&amp;rsquo;re greatly increasing the API calls the script executes, from one to N+1, where N is the number of channels returned back by Slack.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Run the new script again by executing &lt;code&gt;python app.py&lt;/code&gt;:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;line&quot;&gt;Channels:
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;general &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;C0S82S5RS&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;yada yada yada.
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;python &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;C0S8HABL3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;This is posted to &lt;span class=&quot;c&quot;&gt;#python and comes from a bot named webhookbot.&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;random &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;C0S8F4432&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;@U0SAEJ99T&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;samb&amp;gt; has joined the channel
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;Nice! Now we have both the list of channels as well as a way to get detailed information on each channel with its ID. Next let&amp;rsquo;s interact with other users in one of our channels by sending and receiving messages.&lt;/p&gt;

&lt;a name=&quot;Sending.Messages&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Sending Messages&lt;/h2&gt;

&lt;p&gt;We can go even further into the Slack API now that we know our API calls are working and have the channel ID. Let&amp;rsquo;s send a message to the #general channel.&lt;/p&gt;

&lt;p&gt;Add a new function under &lt;code&gt;channel_info&lt;/code&gt; named &lt;code&gt;send_message&lt;/code&gt;:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;slack_client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;api_call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;s&quot;&gt;&amp;quot;chat.postMessage&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'pythonbot'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;n&quot;&gt;icon_emoji&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;':robot_face:'&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;send_message&lt;/code&gt; takes in the ID for a channel, then posts a message from our &amp;ldquo;Python bot&amp;rdquo; to that channel. In addition, modify the &lt;code&gt;main&lt;/code&gt; function so that when we run this file, &lt;code&gt;main&lt;/code&gt; will call our new &lt;code&gt;send_message&lt;/code&gt; function:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;channels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_channels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Channels: &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; (&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;n&quot;&gt;detailed_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;detailed_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Latest text from '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detailed_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'latest'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'text'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'general'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;n&quot;&gt;send_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hello &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;                             &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;! It worked!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'-----'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Unable to authenticate.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;Save the changes and run &lt;code&gt;python app.py&lt;/code&gt;. Open the #general channel for your Slack team. You should see your Python bot post a new message to the channel:&lt;/p&gt;

&lt;div class=&quot;center-text&quot;&gt;
  &lt;img class=&quot;no-border&quot; src=&quot;https://realpython.com/images/blog_images/slack-api/slack-send-message.png&quot; alt=&quot;Slack Send Message&quot; /&gt;
&lt;/div&gt;




&lt;br /&gt;


&lt;p&gt;Awesome! So we can send messages, but what about if we want to see what users in the #general channel are saying?&lt;/p&gt;

&lt;a name=&quot;Receiving.Messages&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Receiving Messages&lt;/h2&gt;

&lt;p&gt;We can set up an outgoing webhook that will alert our Python application via an HTTP POST request. This part is a bit more complicated than sending messages because we need to receive one or more POST requests.&lt;/p&gt;

&lt;p&gt;First we&amp;rsquo;ll need a simple web server that can handle an inbound POST request from the Slack webhook. Create a new file named &lt;em&gt;receive.py&lt;/em&gt; with the following code:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;8&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;9&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;17&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;19&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;21&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;22&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;23&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;26&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;27&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;n&quot;&gt;SLACK_WEBHOOK_SECRET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'SLACK_WEBHOOK_SECRET'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/slack'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'POST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inbound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'token'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SLACK_WEBHOOK_SECRET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'channel_name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'user_name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'text'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;n&quot;&gt;inbound_message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; in &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; says: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inbound_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'GET'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'It works!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;In the above Python file, we:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Import Flask&lt;/li&gt;
&lt;li&gt;Instantiate a new Flask application context&lt;/li&gt;
&lt;li&gt;Pull in the &lt;code&gt;SLACK_WEBHOOK_SECRET&lt;/code&gt; environment variable, which we&amp;rsquo;ll get in just a moment from the Slack console&lt;/li&gt;
&lt;li&gt;Establish a route that can receive an HTTP POST request from Slack that prints the output to the command line as long as the webhook secret key sent to us matches the one from our environment variable&lt;/li&gt;
&lt;li&gt;Create another route for testing purposes that responds to a GET request&lt;/li&gt;
&lt;li&gt;Set our Flask app to run when we run this script with Python&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Install Flask (&lt;code&gt;pip install flask&lt;/code&gt;), and then start the Flask app with the &lt;code&gt;python receive.py&lt;/code&gt; command and we&amp;rsquo;ll see some debugging output indicating the development server is running.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Running on &lt;a href=&quot;http://127.0.0.1:5000/&quot;&gt;http://127.0.0.1:5000/&lt;/a&gt; (Press CTRL+C to quit)&lt;/li&gt;
&lt;li&gt;Restarting with stat&lt;/li&gt;
&lt;li&gt;Debugger is active!&lt;/li&gt;
&lt;li&gt;Debugger pin code: 144-609-426&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;We&amp;rsquo;re set to receive our POST request webhook, except that most development environments do not expose routes beyond localhost. We need a localhost tunnel that will give us an externally-accessible domain name while we&amp;rsquo;re developing our code. I typically use &lt;a href=&quot;https://ngrok.com/&quot;&gt;ngrok&lt;/a&gt; since it&amp;rsquo;s &lt;a href=&quot;https://www.twilio.com/blog/2015/09/6-awesome-reasons-to-use-ngrok-when-testing-webhooks.html&quot;&gt;easy, free and awesome&lt;/a&gt;. There are also other options such as &lt;a href=&quot;https://localtunnel.me/&quot;&gt;localtunnel&lt;/a&gt; and &lt;a href=&quot;https://forwardhq.com/&quot;&gt;forward&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After downloading and running ngrok (or another localhost tunneling tool) in a new terminal window, you&amp;rsquo;ll get a subdomain that forwards requests sent to that subdomain over to your localhost server. Here is what ngrok looks like in the console when it&amp;rsquo;s started with the &lt;code&gt;./ngrok http 5000&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;center-text&quot;&gt;
  &lt;img class=&quot;no-border&quot; src=&quot;https://realpython.com/images/blog_images/slack-api/ngrok.png&quot; alt=&quot;ngrok&quot; /&gt;
&lt;/div&gt;




&lt;br /&gt;


&lt;p&gt;Take note of your Forwarding URL, in this case &lt;code&gt;https://6940e7da.ngrok.io&lt;/code&gt;, as we&amp;rsquo;ll need that for Slack to set up our outgoing webhook. Then test that our ngrok forwarding URL is properly connected to our Flask app by opening your web browser and going to the Forwarding URL. We should see the &amp;ldquo;It works!&amp;rdquo; message.&lt;/p&gt;

&lt;p&gt;Now we can use that ngrok Forwarding URL in our Slack configuration. Go to the &lt;a href=&quot;https://api.slack.com/outgoing-webhooks&quot;&gt;Slack Outgoing Webhooks page&lt;/a&gt;, then click the &amp;ldquo;outgoing webhook integration&amp;rdquo; link as shown below:&lt;/p&gt;

&lt;div class=&quot;center-text&quot;&gt;
  &lt;img class=&quot;no-border&quot; src=&quot;https://realpython.com/images/blog_images/slack-api/slack-outgoing-webhooks.png&quot; alt=&quot;Slack Outgoing Webhooks&quot; /&gt;
&lt;/div&gt;




&lt;br /&gt;


&lt;p&gt;Scroll down to the Integration Settings section. Select &amp;ldquo;#general&amp;rdquo; as the channel to listen on. Copy your ngrok Forwarding URL plus &amp;ldquo;/slack&amp;rdquo; into the URL(s) text box:&lt;/p&gt;

&lt;div class=&quot;center-text&quot;&gt;
  &lt;img class=&quot;no-border&quot; src=&quot;https://realpython.com/images/blog_images/slack-api/slack-outgoing-webhooks-settings.png&quot; alt=&quot;Slack Outgoing Webhooks Settings&quot; /&gt;
&lt;/div&gt;




&lt;br /&gt;


&lt;p&gt;Copy the generated Token. Scroll down and press the &amp;ldquo;Save Settings&amp;rdquo; button.&lt;/p&gt;

&lt;p&gt;Stop your Flask server for just a moment. As we did earlier with the Slack token, use the &lt;code&gt;export&lt;/code&gt; command to expose the outgoing webhook token as an environment variable:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;venv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SLACK_WEBHOOK_SECRET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'generated outgoing webhook token here'&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;Then restart your Flask server so it can grab the generated &lt;code&gt;SLACK_WEBHOOK_SECRET&lt;/code&gt;. Finally, it&amp;rsquo;s time to test out receiving messages!&lt;/p&gt;

&lt;p&gt;Go to your Slack #general channel. You should see that the outgoing webhook integration has been added to the channel:&lt;/p&gt;

&lt;div class=&quot;center-text&quot;&gt;
  &lt;img class=&quot;no-border&quot; src=&quot;https://realpython.com/images/blog_images/slack-api/slack-webhook-added.png&quot; alt=&quot;Slack Webhook Added to the Channel&quot; /&gt;
&lt;/div&gt;




&lt;br /&gt;


&lt;p&gt;Within Slack, type in a message like &amp;ldquo;testing&amp;rdquo; and hit enter. Go back to the command line where your Flask app is running.
You should see the message output printed from the POST request:&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre class=&quot;line-numbers&quot;&gt;&lt;span class=&quot;line-number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-number&quot;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sh&quot;&gt;&lt;span class=&quot;line&quot;&gt;matt in general says: testing
&lt;/span&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1 - - &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;21/May/2016 12:39:56&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;POST /slack HTTP/1.1&amp;quot;&lt;/span&gt; 200 -
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;


&lt;p&gt;Now we&amp;rsquo;ve got a way to receive messages from one or more channels and can add whatever Python code we want to handle the input. This is a great hook for building a bot or sending messages to another service for processing.&lt;/p&gt;

&lt;a name=&quot;Wrapping.it.up&quot;&gt;&lt;/a&gt;
&lt;h2&gt;Wrapping it up&lt;/h2&gt;

&lt;p&gt;Woohoo! All done! Well actually, there’s a whole lot more you can do with the Slack API. Here are several more ideas to try out now that you’ve got the basics down:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Combine the &lt;a href=&quot;https://www.twilio.com/blog/2016/05/build-sms-slack-bot-python.html&quot;&gt;Twilio API to communicate with Slack channels via text messages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Try a different Slack client or ditch the helper library entirely and use the &lt;a href=&quot;https://realpython.com/blog/python/caching-external-api-requests/&quot;&gt;Requests library to implement retry logic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@julianmartinez/how-to-write-a-slack-bot-with-python-code-examples-4ed354407b98#.gdc0pkni0&quot;&gt;Write and customize a full Slack bot&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;hr /&gt;


&lt;p&gt;That’s all for now.&lt;/p&gt;

&lt;p&gt;If you have questions feel free to drop a comment below or contact me via:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Twitter: &lt;a href=&quot;https://twitter.com/mattmakai&quot;&gt;@mattmakai&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/fullstackpython&quot;&gt;@fullstackpython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GitHub: &lt;a href=&quot;https://github.com/makaimc&quot;&gt;makaimc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Twitch (live coding with Python &amp;amp; Swift): &lt;a href=&quot;https://www.twitch.tv/mattmakai&quot;&gt;mattmakai&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
	<pubDate>Tue, 24 May 2016 13:18:21 +0000</pubDate>
</item>
<item>
	<title>Mike Driscoll: Python 101: An Intro to Benchmarking your code</title>
	<guid>http://www.blog.pythonlibrary.org/2016/05/24/python-101-an-intro-to-benchmarking-your-code/</guid>
	<link>http://www.blog.pythonlibrary.org/2016/05/24/python-101-an-intro-to-benchmarking-your-code/</link>
	<description>&lt;div class=&quot;pf-content&quot;&gt;&lt;p&gt;What does it mean to benchmark ones code? The main idea behind benchmarking or profiling is to figure out how fast your code executes and where the bottlenecks are. The main reason to do this sort of thing is for optimization. You will run into situations where you need your code to run faster because your business needs have changed. When this happens, you will need to figure out what parts of your code are slowing it down. &lt;/p&gt;
&lt;p&gt;This chapter will only cover how to profile your code using a variety of tools. It will not go into actually optimizing your code. Let&amp;#8217;s get started!&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;more-5528&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;timeit&lt;/h3&gt;
&lt;p&gt;
&lt;p&gt;Python comes with a module called &lt;strong&gt;timeit&lt;/strong&gt;. You can use it to time small code snippets. The timeit module uses platform-specific time functions so that you will get the most accurate timings possible. &lt;/p&gt;
&lt;p&gt;The timeit module has a command line interface, but it can also be imported. We will start out by looking at how to use timeit from the command line. Open up a terminal and try the following examples:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;br /&gt;
python -m timeit -s &amp;quot;[ord(x) for x in 'abcdfghi']&amp;quot;&lt;br /&gt;
100000000 loops, best of 3: 0.0115 usec per loop&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;python -m timeit -s &amp;quot;[chr(int(x)) for x in '123456789']&amp;quot;&lt;br /&gt;
100000000 loops, best of 3: 0.0119 usec per loop&lt;br /&gt;
&lt;/p&gt;&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;What&amp;#8217;s going on here? Well, when you call Python on the command line and pass it the “-m” option, you are telling it to look up a module and use it as the main program. The “-s” tells the timeit module to run setup once. Then it runs the code for n number of loops 3 times and returns the best average of the 3 runs. For these silly examples, you won&amp;#8217;t see much difference.&lt;/p&gt;
&lt;p&gt;Your output will likely be slightly different as it is dependent on your computer&amp;#8217;s specifications. &lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s write a silly function and see if we can time it from the command line:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;# simple_func.py&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt; my_function&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
    &lt;span&gt;try&lt;/span&gt;:
        &lt;span&gt;1&lt;/span&gt; / &lt;span&gt;0&lt;/span&gt;
    &lt;span&gt;except&lt;/span&gt; &lt;span&gt;ZeroDivisionError&lt;/span&gt;:
        &lt;span&gt;pass&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;All this function does is cause an error that is promptly ignored. Yes, it&amp;#8217;s another silly example. To get timeit to run this code on the command line, we will need to import the code into its namespace, so make sure you have changed your current working directory to be in the same folder that this script is in. Then run the following:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;br /&gt;
python -m timeit &amp;quot;import simple_func; simple_func.my_function()&amp;quot;&lt;br /&gt;
1000000 loops, best of 3: 1.77 usec per loop&lt;br /&gt;
&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Here we import the function and then call it. Note that we separate the import and the function call with semi-colons and that the Python code is in quotes. Now we&amp;#8217;re ready to learn how to use timeit inside an actual Python script.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Importing timeit for Testing&lt;/h3&gt;
&lt;p&gt;
&lt;p&gt;Using the timeit module inside your code is also pretty easy. We’ll use the same silly script from before and show you how below:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;def&lt;/span&gt; my_function&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
    &lt;span&gt;try&lt;/span&gt;:
        &lt;span&gt;1&lt;/span&gt; / &lt;span&gt;0&lt;/span&gt;
    &lt;span&gt;except&lt;/span&gt; &lt;span&gt;ZeroDivisionError&lt;/span&gt;:
        &lt;span&gt;pass&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;:
    &lt;span&gt;import&lt;/span&gt; &lt;span&gt;timeit&lt;/span&gt;
    setup = &lt;span&gt;&amp;quot;from __main__ import my_function&amp;quot;&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt; &lt;span&gt;timeit&lt;/span&gt;.&lt;span&gt;timeit&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;my_function()&amp;quot;&lt;/span&gt;, setup=setup&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Here we check to see if the script is being run directly (i.e. not imported). If it is, then we import timeit, create a setup string to import the function into timeit’s namespace and then we call timeit.timeit. You will note that we pass a call to the function in quotes, then the setup string. And that’s really all there is to it! Now let&amp;#8217;s learn about how to write our own timer decorator.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Use a decorator&lt;/h3&gt;
&lt;p&gt;
&lt;p&gt;Writing your own timer is a lot of fun too, although it may not be as accurate as just using timeit depending on the use case. Regardless, we&amp;#8217;re going to write our own custom function timing decorator! Here&amp;#8217;s the code:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;random&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt; &lt;span&gt;time&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;def&lt;/span&gt; timerfunc&lt;span&gt;&amp;#40;&lt;/span&gt;func&lt;span&gt;&amp;#41;&lt;/span&gt;:
    &lt;span&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;quot;
    A timer decorator
    &amp;quot;&lt;/span&gt;&lt;span&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span&gt;def&lt;/span&gt; function_timer&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;args, &lt;span&gt;**&lt;/span&gt;kwargs&lt;span&gt;&amp;#41;&lt;/span&gt;:
        &lt;span&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;quot;
        A nested function for timing other functions
        &amp;quot;&lt;/span&gt;&lt;span&gt;&amp;quot;&amp;quot;&lt;/span&gt;
        start = &lt;span&gt;time&lt;/span&gt;.&lt;span&gt;time&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        value = func&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;*&lt;/span&gt;args, &lt;span&gt;**&lt;/span&gt;kwargs&lt;span&gt;&amp;#41;&lt;/span&gt;
        end = &lt;span&gt;time&lt;/span&gt;.&lt;span&gt;time&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        runtime = end - start
        msg = &lt;span&gt;&amp;quot;The runtime for {func} took {time} seconds to complete&amp;quot;&lt;/span&gt;
        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;msg.&lt;span&gt;format&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;func=func.__name__,
                         &lt;span&gt;time&lt;/span&gt;=runtime&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;return&lt;/span&gt; value
    &lt;span&gt;return&lt;/span&gt; function_timer
&amp;nbsp;
&amp;nbsp;
@timerfunc
&lt;span&gt;def&lt;/span&gt; long_runner&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
    &lt;span&gt;for&lt;/span&gt; x &lt;span&gt;in&lt;/span&gt; &lt;span&gt;range&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
        sleep_time = &lt;span&gt;random&lt;/span&gt;.&lt;span&gt;choice&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;range&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;5&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;time&lt;/span&gt;.&lt;span&gt;sleep&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;sleep_time&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;'__main__'&lt;/span&gt;:
    long_runner&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;For this example, we import the **random** and the **time** modules from Python&amp;#8217;s standard library. Then we create our decorator function. You will notice that it accepts a function and has another function inside of it. The nested function will grab the time before calling the passed in function. Then it waits for the function to return and grabs the end time. Now we know how long the function took to run, so we print it out. Of course, the decorator also needs to return the result of the function call and the function itself, so that&amp;#8217;s what the last two statements are all about.&lt;/p&gt;
&lt;p&gt;The next function is decorated with our timing decorator. You will note that it uses random to &amp;#8220;randomly&amp;#8221; sleep a few seconds. This is just to demonstrate a long running program. You would actually want to time functions that connect to databases (or run large queries), websites, run threads or do other things that take a while to complete.&lt;/p&gt;
&lt;p&gt;Each time you run this code, the result will be slightly different. Give it a try and see for yourself!&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Create a Timing Context Manager&lt;/h3&gt;
&lt;p&gt;
&lt;p&gt;Some programmers like to use context managers to time small pieces of code. So let&amp;#8217;s create our own timer context manager class!&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;import&lt;/span&gt; &lt;span&gt;random&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt; &lt;span&gt;time&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;class&lt;/span&gt; MyTimer&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
&amp;nbsp;
    &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
        &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;start&lt;/span&gt; = &lt;span&gt;time&lt;/span&gt;.&lt;span&gt;time&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
    &lt;span&gt;def&lt;/span&gt; __enter__&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
        &lt;span&gt;return&lt;/span&gt; &lt;span&gt;self&lt;/span&gt;
&amp;nbsp;
    &lt;span&gt;def&lt;/span&gt; __exit__&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;, exc_type, exc_val, exc_tb&lt;span&gt;&amp;#41;&lt;/span&gt;:
        end = &lt;span&gt;time&lt;/span&gt;.&lt;span&gt;time&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        runtime = end - &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;start&lt;/span&gt;
        msg = &lt;span&gt;'The function took {time} seconds to complete'&lt;/span&gt;
        &lt;span&gt;print&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;msg.&lt;span&gt;format&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;time&lt;/span&gt;=runtime&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
&amp;nbsp;
&lt;span&gt;def&lt;/span&gt; long_runner&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
    &lt;span&gt;for&lt;/span&gt; x &lt;span&gt;in&lt;/span&gt; &lt;span&gt;range&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
        sleep_time = &lt;span&gt;random&lt;/span&gt;.&lt;span&gt;choice&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;range&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;,&lt;span&gt;5&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;time&lt;/span&gt;.&lt;span&gt;sleep&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;sleep_time&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
&amp;nbsp;
&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;'__main__'&lt;/span&gt;:
    with MyTimer&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
        long_runner&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;In this example, we use the class&amp;#8217;s &lt;strong&gt;__init__&lt;/strong&gt; method to start our timer. The &lt;strong&gt;__enter__&lt;/strong&gt; method doesn&amp;#8217;t need to do anything other then return itself. Lastly, the &lt;strong&gt;__exit__&lt;/strong&gt; method has all the juicy bits. Here we grab the end time, calculate the total run time and print it out. &lt;/p&gt;
&lt;p&gt;The end of the code actually shows an example of using our context manager where we wrap the function from the previous example in our custom context manager.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;cProfile&lt;/h3&gt;
&lt;p&gt;
&lt;p&gt;ython comes with its own code profilers built-in. There is the &lt;strong&gt;profile&lt;/strong&gt; module and the &lt;strong&gt;cProfile&lt;/strong&gt; module. The profile module is pure Python, but it will add a lot of overhead to anything you profile, so it&amp;#8217;s usually recommended that you go with cProfile, which has a similar interface but is much faster. &lt;/p&gt;
&lt;p&gt;We&amp;#8217;re not going to go into a lot of detail about this module in this chapter, but let&amp;#8217;s look at a couple of fun examples so you get a taste for what it can do.&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span&gt;import&lt;/span&gt; cProfile
&lt;span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; cProfile.&lt;span&gt;run&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;[x for x in range(1500)]&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
         &lt;span&gt;4&lt;/span&gt; function calls &lt;span&gt;in&lt;/span&gt; &lt;span&gt;0.001&lt;/span&gt; seconds
&amp;nbsp;
   Ordered by: standard name
&amp;nbsp;
   ncalls  tottime  percall  cumtime  percall filename:lineno&lt;span&gt;&amp;#40;&lt;/span&gt;function&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;1&lt;/span&gt;    &lt;span&gt;0.000&lt;/span&gt;    &lt;span&gt;0.000&lt;/span&gt;    &lt;span&gt;0.000&lt;/span&gt;    &lt;span&gt;0.000&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;string&lt;span&gt;&amp;gt;&lt;/span&gt;:&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;listcomp&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;1&lt;/span&gt;    &lt;span&gt;0.000&lt;/span&gt;    &lt;span&gt;0.000&lt;/span&gt;    &lt;span&gt;0.000&lt;/span&gt;    &lt;span&gt;0.000&lt;/span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt;string&lt;span&gt;&amp;gt;&lt;/span&gt;:&lt;span&gt;1&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;module&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;1&lt;/span&gt;    &lt;span&gt;0.001&lt;/span&gt;    &lt;span&gt;0.001&lt;/span&gt;    &lt;span&gt;0.001&lt;/span&gt;    &lt;span&gt;0.001&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;built-&lt;span&gt;in&lt;/span&gt; method builtins.&lt;span&gt;exec&lt;/span&gt;&lt;span&gt;&amp;#125;&lt;/span&gt;
        &lt;span&gt;1&lt;/span&gt;    &lt;span&gt;0.000&lt;/span&gt;    &lt;span&gt;0.000&lt;/span&gt;    &lt;span&gt;0.000&lt;/span&gt;    &lt;span&gt;0.000&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;method &lt;span&gt;'disable'&lt;/span&gt; of &lt;span&gt;'_lsprof.Profiler'&lt;/span&gt; objects&lt;span&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;#8217;s break this down a bit. The first line shows that there were 4 function calls. The next line tells us how the results are ordered. According to the documentation, standard name refers to the far right column. There are a number of columns here.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ncalls&lt;/strong&gt; is the number of calls made. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tottime&lt;/strong&gt; is a total of the time spent in the given function.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;percall&lt;/strong&gt; refers to the quotient of tottime divided by ncalls&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cumtime&lt;/strong&gt; is the cumulative time spent in this and all subfunctions. It&amp;#8217;s even accurate for recursive functions!&lt;/li&gt;
&lt;li&gt;The second &lt;strong&gt;percall&lt;/strong&gt; column is the quotient of cumtime divided by primitive calls&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;filename:lineno(function)&lt;/strong&gt; provides the respective data of each function&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can call cProfile on the command line in much the same way as we did with the timeit module. The main difference is that you would pass a Python script to it instead of just passing a snippet. Here&amp;#8217;s an example call:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;br /&gt;
python -m cProfile test.py&lt;br /&gt;
&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Give it a try on one of your own modules or try it on one of Python&amp;#8217;s modules to see how it works.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;line_profiler&lt;/h3&gt;
&lt;p&gt;
&lt;p&gt;There&amp;#8217;s a neat 3rd party project called &lt;strong&gt;line_profiler&lt;/strong&gt; that is designed to profile the time each individual line takes to execute. It also includes a script called &lt;strong&gt;kernprof&lt;/strong&gt; for profiling Python applications and scripts using line_profiler. Just use pip to install the package. Here&amp;#8217;s how:&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;
pip install line_profiler&lt;br /&gt;
&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;To actually use the line_profiler, we will need some code to profile. But first, I need to explain how line_profiler works when you call it on the command line. You will actually be calling line_profiler by calling the kernprof script. I thought that was a bit confusing the first time I used it, but that&amp;#8217;s just the way it works. Here&amp;#8217;s the normal way to use it:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;br /&gt;
kernprof -l silly_functions.py&lt;br /&gt;
&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will print out the following message when it finishes: &lt;em&gt;Wrote profile results to silly_functions.py.lprof&lt;/em&gt;. This is a binary file that we can&amp;#8217;t view directly. When we run kernprof though, it will actually inject an instance of &lt;strong&gt;LineProfiler&lt;/strong&gt; into your script&amp;#8217;s &lt;strong&gt;__builtins__&lt;/strong&gt; namespace. The instance will be named &lt;strong&gt;profile&lt;/strong&gt; and is meant to be used as a decorator. With that in mind, we can actually write our script:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;# silly_functions.py&lt;/span&gt;
&lt;span&gt;import&lt;/span&gt; &lt;span&gt;time&lt;/span&gt;
&amp;nbsp;
@&lt;span&gt;profile&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt; fast_function&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
    &lt;span&gt;print&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;I'm a fast function!&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
@&lt;span&gt;profile&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt; slow_function&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
    &lt;span&gt;time&lt;/span&gt;.&lt;span&gt;sleep&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;print&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;I'm a slow function&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;'__main__'&lt;/span&gt;:
    fast_function&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    slow_function&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;So now we have two decorated functions that are decorated with something that isn&amp;#8217;t imported. If you actually try to run this script as is, you will get a &lt;strong&gt;NameError&lt;/strong&gt; because &amp;#8220;profile&amp;#8221; is not defined. So always remember to remove your decorators after you have profiled your code!&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s back up and learn how to actually view the results of our profiler. There are two methods we can use. The first is to use the line_profiler module to read our results file:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;br /&gt;
python -m line_profiler silly_functions.py.lprof&lt;br /&gt;
&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The alternate method is to just use kernprof in verbose mode by passing is &lt;strong&gt;-v&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;br /&gt;
kernprof -l -v silly_functions.py&lt;br /&gt;
&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Regardless which method you use, you should end up seeing something like the following get printed to your screen:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;I&lt;span&gt;'m a fast function!
I'&lt;/span&gt;m a slow function
Wrote &lt;span&gt;profile&lt;/span&gt; results to silly_functions.&lt;span&gt;py&lt;/span&gt;.&lt;span&gt;lprof&lt;/span&gt;
Timer unit: 1e&lt;span&gt;-06&lt;/span&gt; s
&amp;nbsp;
Total &lt;span&gt;time&lt;/span&gt;: &lt;span&gt;3&lt;/span&gt;.4e&lt;span&gt;-05&lt;/span&gt; s
File: silly_functions.&lt;span&gt;py&lt;/span&gt;
Function: fast_function at line &lt;span&gt;3&lt;/span&gt;
&amp;nbsp;
Line &lt;span&gt;#      Hits         Time  Per Hit   % Time  Line Contents&lt;/span&gt;
==============================================================
     &lt;span&gt;3&lt;/span&gt;                                           @&lt;span&gt;profile&lt;/span&gt;
     &lt;span&gt;4&lt;/span&gt;                                           &lt;span&gt;def&lt;/span&gt; fast_function&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
     &lt;span&gt;5&lt;/span&gt;         &lt;span&gt;1&lt;/span&gt;           &lt;span&gt;34&lt;/span&gt;     &lt;span&gt;34.0&lt;/span&gt;    &lt;span&gt;100.0&lt;/span&gt;      &lt;span&gt;print&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;I'm a fast function!&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
&amp;nbsp;
Total &lt;span&gt;time&lt;/span&gt;: &lt;span&gt;2.001&lt;/span&gt; s
File: silly_functions.&lt;span&gt;py&lt;/span&gt;
Function: slow_function at line &lt;span&gt;7&lt;/span&gt;
&amp;nbsp;
Line &lt;span&gt;#      Hits         Time  Per Hit   % Time  Line Contents&lt;/span&gt;
==============================================================
     &lt;span&gt;7&lt;/span&gt;                                           @&lt;span&gt;profile&lt;/span&gt;
     &lt;span&gt;8&lt;/span&gt;                                           &lt;span&gt;def&lt;/span&gt; slow_function&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
     &lt;span&gt;9&lt;/span&gt;         &lt;span&gt;1&lt;/span&gt;      &lt;span&gt;2000942&lt;/span&gt; &lt;span&gt;2000942.0&lt;/span&gt;    &lt;span&gt;100.0&lt;/span&gt;      &lt;span&gt;time&lt;/span&gt;.&lt;span&gt;sleep&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;10&lt;/span&gt;         &lt;span&gt;1&lt;/span&gt;           &lt;span&gt;59&lt;/span&gt;     &lt;span&gt;59.0&lt;/span&gt;      &lt;span&gt;0.0&lt;/span&gt;      &lt;span&gt;print&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;I'm a slow function&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;You will notice that the source code is printed out with the timing information for each line. There are six columns of information here. Let&amp;#8217;s find out what each one means.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Line #&lt;/strong&gt; &amp;#8211; The line number of the code that was profiled&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hits&lt;/strong&gt; &amp;#8211; The number of times that particular line was executed&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Time&lt;/strong&gt; &amp;#8211; The total amount of time the line took to execute (in the timer&amp;#8217;s unit). The timer unit can be seen at the beginning of the output&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Per Hit&lt;/strong&gt; &amp;#8211; The average amount of time that line of code took to execute (in timer units)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;% Time&lt;/strong&gt; &amp;#8211; The percentage of time spent on the line relative to the total amount of time spent in said function&lt;/li&gt;
&lt;li&gt;Line Contents &amp;#8211; The actual source code that was executed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you happen to be an IPython user, then you might want to know that IPython has a magic command (%lprun) that allows you to specify functions to profile and even which statement to execute.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;memory_profiler&lt;/h3&gt;
&lt;p&gt;
&lt;p&gt;Another great 3rd party profiling package is &lt;strong&gt;memory_profiler&lt;/strong&gt;. The memory_profiler module can be used for monitoring memory consumption in a process or you can use it for a line-by-line analysis of the memory consumption of your code. Since it&amp;#8217;s not included with Python, we&amp;#8217;ll have to install it. You can use pip for this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;br /&gt;
pip install memory_profiler&lt;br /&gt;
&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Once it&amp;#8217;s installed, we need some code to run it against. The memory_profiler actually works in much the same way as line_profiler in that when you run it, memory_profiler will inject an instance of itself into __builtins__ named profile that you are supposed to use as a decorator on the function you are profiling. Here&amp;#8217;s a simple example:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;# memo_prof.py &lt;/span&gt;
@&lt;span&gt;profile&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt; mem_func&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
    lots_of_numbers = &lt;span&gt;list&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;range&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;1500&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    x = &lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;'letters'&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;**&lt;/span&gt; &lt;span&gt;10&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;del&lt;/span&gt; lots_of_numbers
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;'__main__'&lt;/span&gt;:
    mem_func&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;In this example, we create a list that contains 1500 integers. Then we create a list with 9765625 (5 to the 10 power) instances of a string. Finally we delete the first list and return. The memory_profiler doesn&amp;#8217;t have another script you need to run to do the actual profiling like line_profiler did. Instead you can just run Python and use its **-m** parameter on the command line to load the module and run it against our script:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;python -m memory_profiler memo_prof.&lt;span&gt;py&lt;/span&gt; 
Filename: memo_prof.&lt;span&gt;py&lt;/span&gt;
&amp;nbsp;
Line &lt;span&gt;#    Mem usage    Increment   Line Contents&lt;/span&gt;
================================================
     &lt;span&gt;1&lt;/span&gt;   &lt;span&gt;16.672&lt;/span&gt; MiB    &lt;span&gt;0.000&lt;/span&gt; MiB   @&lt;span&gt;profile&lt;/span&gt;
     &lt;span&gt;2&lt;/span&gt;                             &lt;span&gt;def&lt;/span&gt; mem_func&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
     &lt;span&gt;3&lt;/span&gt;   &lt;span&gt;16.707&lt;/span&gt; MiB    &lt;span&gt;0.035&lt;/span&gt; MiB       lots_of_numbers = &lt;span&gt;list&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;range&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;1500&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
     &lt;span&gt;4&lt;/span&gt;   &lt;span&gt;91.215&lt;/span&gt; MiB   &lt;span&gt;74.508&lt;/span&gt; MiB       x = &lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;'letters'&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;**&lt;/span&gt; &lt;span&gt;10&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
     &lt;span&gt;5&lt;/span&gt;   &lt;span&gt;91.215&lt;/span&gt; MiB    &lt;span&gt;0.000&lt;/span&gt; MiB       &lt;span&gt;del&lt;/span&gt; lots_of_numbers
     &lt;span&gt;6&lt;/span&gt;   &lt;span&gt;91.215&lt;/span&gt; MiB    &lt;span&gt;0.000&lt;/span&gt; MiB       &lt;span&gt;return&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;The columns are pretty self-explanatory this time around. We have our line numbers and then the amount of memory used after said line was executed. Next we have an increment field which tells us the difference in memory of the current line versus the line previous. The very last column is for the code itself.&lt;/p&gt;
&lt;p&gt;The memory_profiler also includes &lt;strong&gt;mprof&lt;/strong&gt; which can be used to create full memory usage reports over time instead of line-by-line. It&amp;#8217;s very easy to use; just take a look:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;br /&gt;
$ mprof run memo_prof.py&lt;br /&gt;
mprof: Sampling memory every 0.1s&lt;br /&gt;
running as a Python program...&lt;br /&gt;
&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;mprof can also create a graph that shows you how your application consumed memory over time. To get the graph, all you need to do is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;br /&gt;
$ mprof plot&lt;br /&gt;
&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For the silly example we created earlier, I got the following graph:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.blog.pythonlibrary.org/wp-content/uploads/2016/05/mprof_graph-1024x489.png&quot; alt=&quot;mprof_graph&quot; width=&quot;604&quot; height=&quot;288&quot; class=&quot;aligncenter size-large wp-image-5555&quot; /&gt;&lt;/p&gt;
&lt;p&gt;You should try running it yourself against a much more complex example to see a more interesting plot.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;profilehooks&lt;/h3&gt;
&lt;p&gt;
&lt;p&gt;The last 3rd party package that we will look at in this chapter is called &lt;strong&gt;profilehooks&lt;/strong&gt;. It is a collection of decorators specifically designed for profiling functions. To install profilehooks, just do the following:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;br /&gt;
pip install profilehooks&lt;br /&gt;
&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now that we have it installed, let&amp;#8217;s re-use the example from the last section and modify it slightly to use profilehooks:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;# profhooks.py&lt;/span&gt;
&lt;span&gt;from&lt;/span&gt; profilehooks &lt;span&gt;import&lt;/span&gt; &lt;span&gt;profile&lt;/span&gt;
&amp;nbsp;
&amp;nbsp;
@&lt;span&gt;profile&lt;/span&gt;
&lt;span&gt;def&lt;/span&gt; mem_func&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
    lots_of_numbers = &lt;span&gt;list&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;range&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;1500&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    x = &lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;'letters'&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;**&lt;/span&gt; &lt;span&gt;10&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;del&lt;/span&gt; lots_of_numbers
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;'__main__'&lt;/span&gt;:
    mem_func&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;All you need to do to use profilehooks is import it and then decorate the function that you want to profile. If you run the code above, you will get output similar to the following sent to stdout:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;***&lt;/span&gt; PROFILER RESULTS &lt;span&gt;***&lt;/span&gt;
mem_func &lt;span&gt;&amp;#40;&lt;/span&gt;c:\Users\mike\Dropbox\Scripts\py3\profhooks.&lt;span&gt;py&lt;/span&gt;:&lt;span&gt;3&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
function called &lt;span&gt;1&lt;/span&gt; times
&amp;nbsp;
         &lt;span&gt;3&lt;/span&gt; function calls &lt;span&gt;in&lt;/span&gt; &lt;span&gt;0.096&lt;/span&gt; seconds
&amp;nbsp;
   Ordered by: cumulative &lt;span&gt;time&lt;/span&gt;, internal &lt;span&gt;time&lt;/span&gt;, call count
&amp;nbsp;
   ncalls  tottime  percall  cumtime  percall filename:lineno&lt;span&gt;&amp;#40;&lt;/span&gt;function&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;1&lt;/span&gt;    &lt;span&gt;0.096&lt;/span&gt;    &lt;span&gt;0.096&lt;/span&gt;    &lt;span&gt;0.096&lt;/span&gt;    &lt;span&gt;0.096&lt;/span&gt; profhooks.&lt;span&gt;py&lt;/span&gt;:&lt;span&gt;3&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;mem_func&lt;span&gt;&amp;#41;&lt;/span&gt;
        &lt;span&gt;1&lt;/span&gt;    &lt;span&gt;0.000&lt;/span&gt;    &lt;span&gt;0.000&lt;/span&gt;    &lt;span&gt;0.000&lt;/span&gt;    &lt;span&gt;0.000&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;&lt;span&gt;range&lt;/span&gt;&lt;span&gt;&amp;#125;&lt;/span&gt;
        &lt;span&gt;1&lt;/span&gt;    &lt;span&gt;0.000&lt;/span&gt;    &lt;span&gt;0.000&lt;/span&gt;    &lt;span&gt;0.000&lt;/span&gt;    &lt;span&gt;0.000&lt;/span&gt; &lt;span&gt;&amp;#123;&lt;/span&gt;method &lt;span&gt;'disable'&lt;/span&gt; of &lt;span&gt;'_lsprof.Profiler'&lt;/span&gt; objects&lt;span&gt;&amp;#125;&lt;/span&gt;
        &lt;span&gt;0&lt;/span&gt;    &lt;span&gt;0.000&lt;/span&gt;             &lt;span&gt;0.000&lt;/span&gt;          &lt;span&gt;profile&lt;/span&gt;:&lt;span&gt;0&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;profiler&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;The output for this package appears to follow that of the cProfile module from Python&amp;#8217;s standard library. You can refer to the descriptions of the columns earlier in this chapter to see what these mean. The profilehooks package has two more decorators. The first one we will look at is called &lt;strong&gt;timecall&lt;/strong&gt;. It gives us the course run time of the function:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;# profhooks2.py&lt;/span&gt;
&lt;span&gt;from&lt;/span&gt; profilehooks &lt;span&gt;import&lt;/span&gt; timecall
&amp;nbsp;
@timecall
&lt;span&gt;def&lt;/span&gt; mem_func&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
    lots_of_numbers = &lt;span&gt;list&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;range&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;1500&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    x = &lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;'letters'&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt; &lt;span&gt;*&lt;/span&gt; &lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;5&lt;/span&gt; &lt;span&gt;**&lt;/span&gt; &lt;span&gt;10&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;
    &lt;span&gt;del&lt;/span&gt; lots_of_numbers
    &lt;span&gt;return&lt;/span&gt; &lt;span&gt;None&lt;/span&gt;
&amp;nbsp;
&lt;span&gt;if&lt;/span&gt; __name__ == &lt;span&gt;'__main__'&lt;/span&gt;:
    mem_func&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;If you run this code, you&amp;#8217;ll see output like this:&lt;/p&gt;
&lt;pre class=&quot;python&quot;&gt;mem_func &lt;span&gt;&amp;#40;&lt;/span&gt;c:\path_to_script\profhooks2.&lt;span&gt;py&lt;/span&gt;:&lt;span&gt;3&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:
  &lt;span&gt;0.141&lt;/span&gt; seconds&lt;/pre&gt;
&lt;p&gt;All decorator does is time the execution time of the function but without the overhead of profiling. It&amp;#8217;s kind of like using **timeit**.&lt;/p&gt;
&lt;p&gt;The last decorator that profhooks provides is called **coverage**. It is supposed to print out the line coverage of a single function. I didn&amp;#8217;t really find this one all that useful myself, but you&amp;#8217;re welcome to give it a try on your own.&lt;/p&gt;
&lt;p&gt;Finally I just want to mention that you can also run profilehooks on the command line using Python&amp;#8217;s -m flag:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;br /&gt;
python -m profilehooks mymodule.py&lt;br /&gt;
&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The profilehooks package is pretty new, but I think it has some potential.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Wrapping Up&lt;/h3&gt;
&lt;p&gt;
&lt;p&gt;We covered a lot of information in this chapter. You learned how to use Python&amp;#8217;s built-in modules, timeit and cProfile to time and profile your code, respectively. You also learned how to write your own timing code and use it as a decorator or a context manager. Then we moved on and looked at some 3rd party packages; namely line_profiler, memory_profiler and profilehooks. At this point, you should be well on your way to benchmarking your own code. Give it a try and see if you can find any bottlenecks of your own.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Related Readings&lt;br /&gt;
&lt;h3&gt;
&lt;ul&gt;
&lt;li&gt;Python performance &lt;a href=&quot;https://www.huyng.com/posts/python-performance-analysis&quot; target=&quot;_blank&quot;&gt;analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Profiling and optimizing &lt;a href=&quot;http://cyrille.rossant.net/profiling-and-optimizing-python-code/&quot; target=&quot;_blank&quot;&gt;Python code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pypi.python.org/pypi/profilehooks&quot; target=&quot;_blank&quot;&gt;Profilehooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Profiling Python like a &lt;a href=&quot;https://zapier.com/engineering/profiling-python-boss/&quot; target=&quot;_blank&quot;&gt;boss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python 102: &lt;a href=&quot;http://www.blog.pythonlibrary.org/2014/03/20/python-102-how-to-profile-your-code/&quot; target=&quot;_blank&quot;&gt;How to Profile Your Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;How to Time Small Pieces of &lt;a href=&quot;http://www.blog.pythonlibrary.org/2014/01/30/how-to-time-small-pieces-of-python-code-with-timeit/&quot; target=&quot;_blank&quot;&gt;Python Code with timeit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/h3&gt;&lt;/h3&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;</description>
	<pubDate>Tue, 24 May 2016 12:30:14 +0000</pubDate>
</item>
<item>
	<title>Ian Ozsvald: PyDataLondon 2016 Conference Write-up</title>
	<guid>http://ianozsvald.com/2016/05/10/pydatalondon-2016-conference-write-up/</guid>
	<link>http://ianozsvald.com/2016/05/10/pydatalondon-2016-conference-write-up/</link>
	<description>&lt;p&gt;We&amp;#8217;ve just run our 3rd &lt;a href=&quot;http://pydata.org/london2016/&quot;&gt;PyDataLondon Conference (2016)&lt;/a&gt; &amp;#8211; 3 days, &lt;a href=&quot;http://pydata.org/london2016/schedule/&quot;&gt;4 tracks&lt;/a&gt;, 330 people.This builds on &lt;a href=&quot;http://ianozsvald.com/2015/06/21/pydatalondon-2015-write-up-and-my-ship-it-talk-on-publishing-data-science-products/&quot;&gt;PyDataLondon 2015&lt;/a&gt;. It was ace! If you&amp;#8217;d like to be notified about PyDataLondon 2017 then &lt;a href=&quot;http://eepurl.com/6JcFz&quot;&gt;join this announce list&lt;/a&gt; (it&amp;#8217;ll be super low volume like it has been for the last 2 years).&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Big thanks to the organizers, sponsors and speakers, such a great conference it was. Being super tired going home on the train, but it was totally worth it. &amp;#8211; &lt;a href=&quot;https://github.com/bsipocz&quot;&gt;Brigitta&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/pydatalondon/status/728927948544299009&quot;&gt;&lt;img class=&quot;alignnone&quot; src=&quot;https://pbs.twimg.com/media/Ch2sFxVWsAACyGQ.jpg&quot; width=&quot;420&quot; height=&quot;315&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We held it at Bloomberg UK again &amp;#8211; many thanks to our hosts! I&amp;#8217;d also like to thank &lt;a href=&quot;http://pydata.org/london2016/about/team/&quot;&gt;my colleagues, review committee&lt;/a&gt; and all our volunteers for their hard work, the weekend went incredibly smoothly and that&amp;#8217;s because our team is so on-top-of-everything &amp;#8211; thanks!&lt;/p&gt;
&lt;p&gt;Our keynote speakers were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.birmingham.ac.uk/staff/profiles/physics/freise-andreas.aspx&quot;&gt;Professor Andreas Freise&lt;/a&gt; (&lt;a href=&quot;https://twitter.com/gwoptics&quot;&gt;@gwoptics&lt;/a&gt;) talking on LIGO and the discovery of gravity waves (&lt;a href=&quot;https://www.youtube.com/watch?v=BXID4teFfDc&quot;&gt;video&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/tetiana-ivanova-1886b14&quot;&gt;Tetiana Ivanova&lt;/a&gt; on her journey into data science (video forthcoming)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/teoliphant&quot;&gt;Travis Oliphant&lt;/a&gt; on the breadth of the Python data science toolset (&lt;a href=&quot;https://www.youtube.com/watch?v=-aFTKM3nmZo&quot;&gt;video&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Our videos are being uploaded to &lt;a href=&quot;https://www.youtube.com/user/PyDataTV&quot;&gt;YouTube&lt;/a&gt;. Slides will be linked against each author&amp;#8217;s entry. There are an awful lot of &lt;a href=&quot;https://twitter.com/search?q=%23pydatalondon&amp;src=typd&quot;&gt;happy comments on Twitter&lt;/a&gt; too. Our speakers covered Python, Julia, R, MCMC, clustering, geodata, financial modeling, visualisation, deployment, pipelines and a whole lot more. I spoke on &lt;a href=&quot;http://ianozsvald.com/2016/05/07/statistically-solving-sneezes-and-sniffles-a-work-in-progress-report-at-pydatalondon-2016/&quot;&gt;Statistically Solving Sneezes and Sniffles&lt;/a&gt; (a citizen science project using ML to try to diagnose the causes of Rhinitis). Our Beginner Bootcamp (led by Conrad) had over 50 attendees!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/pydatalondon/status/728540934154145793&quot;&gt;&lt;img class=&quot;alignnone&quot; src=&quot;https://pbs.twimg.com/media/ChxMF-mWEAEU06p.jpg&quot; width=&quot;420&quot; height=&quot;315&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;#8230;Let me second that. My first PyData also. It was incredible. Well organised &amp;#8211; kudos to everyone who helped make it happen; you guys are pros. I found Friday useful as well, are the meetups like that? I&amp;#8217;d love to be more involved in this community. &amp;#8211;  lewis&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We had two signing sessions for five authors with a ton of free books to give away:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kyran Dale &amp;#8211; Data Visualisation with Python and Javascript (these were the first copies in the UK!)&lt;/li&gt;
&lt;li&gt;Amit Nandi &amp;#8211; Spark for Python Developers&lt;/li&gt;
&lt;li&gt;Malcolm Sherrington &amp;#8211; Mastering Julia&lt;/li&gt;
&lt;li&gt;Rui Miguel Forte &amp;#8211; Mastering Predictive Analytics with R&lt;/li&gt;
&lt;li&gt;Ian Ozsvald (me!) &amp;#8211; &lt;a href=&quot;http://www.anrdoezrs.net/click-7483262-11260198?url=http%3A%2F%2Fshop.oreilly.com%2Fproduct%2F0636920028963.do%3Fcmp%3Daf-strata-books-videos-product_cj_9781491900727_%2525zp&amp;cjsku=0636920028963&quot;&gt;High Performance Python&lt;/a&gt; (now in Italian, Polish and Japanese)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/pydatalondon/status/729287754899718144&quot;&gt;&lt;img class=&quot;alignnone&quot; src=&quot;https://pbs.twimg.com/media/Ch7zSZSUoAEHfqj.jpg&quot; width=&quot;295&quot; height=&quot;393&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Some achievements&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We used slack for all members at the conference &amp;#8211; attendees started side-channels to share tutorial files, discuss the meets and recommend lunch venues (!)&lt;/li&gt;
&lt;li&gt;We added an Unconference track (7 blank slots that anyone could sign-up for on the day), this brought us a nice random mix of new topics and round-table discussions&lt;/li&gt;
&lt;li&gt;A new bioinformatics slack channel is likely to be formed due to collaborations at the conference&lt;/li&gt;
&lt;li&gt;We signed up a ton of new volunteers to help us next year (thanks!)&lt;/li&gt;
&lt;li&gt;An impromptu &lt;a href=&quot;https://twitter.com/frathgeber/status/729321263852851200&quot;&gt;jobs board&lt;/a&gt; appeared on a notice board and was rapidly filled (if useful &amp;#8211; also see &lt;a href=&quot;http://ianozsvald.com/2016/01/12/data-scientist-jobs-in-london/&quot;&gt;my jobs list&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;&lt;p&gt;Thank you to all the organisers and speakers! It&amp;#8217;s been my first PyData and it&amp;#8217;s been great! &amp;#8211; raffo&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We had 15-20% female attendance this year, a slight drop on last year&amp;#8217;s numbers (we&amp;#8217;ll keep working to do better).&lt;/p&gt;
&lt;p&gt;On a personal note it was great to see colleagues who I&amp;#8217;ve coached in the past &amp;#8211; especially as some were speaking or were a part of our organising committee.&lt;/p&gt;
&lt;p&gt;With thanks to our sponsors and via ticket sales we raised more money this year for the &lt;a href=&quot;http://www.numfocus.org/&quot;&gt;NumFOCUS&lt;/a&gt; non-profit that backs the scientific Python stack (they give grants and stipends for contributors). We&amp;#8217;d love to have more sponsors next year (this is especially useful if you&amp;#8217;re hiring!). Thanks to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.continuum.io/&quot;&gt;Continuum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.bloomberg.com/europe&quot;&gt;Bloomberg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.endava.com/&quot;&gt;Endava&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.channel4.com/&quot;&gt;Channel 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://developers.lyst.com/&quot;&gt;Lyst&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.pivigo.com/&quot;&gt;Pivigo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.serenataflowers.com/&quot;&gt;Seranata Flowers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.uk.capgemini.com/&quot;&gt;Cap Gemini&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let me know if you do a write-up so I can link it here please:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://marcobonzanini.com/2016/05/11/pydata-london-2016-write-up/&quot;&gt;Marco Bonzanini&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.kdnuggets.com/2016/05/top-talks-tutorials-pydata-london.html?utm_content=bufferf4019&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer&quot;&gt;Matthew Mayo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://datapythonista.blogspot.co.uk/2016/05/pydata-write-up.html&quot;&gt;Marc Garcia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.software.ac.uk/blog/2016-05-16-pydata-london-2016&quot;&gt;Dr. Olivia Guest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://developers.lyst.com/2016/05/09/pydata-london-2016/&quot;&gt;Lyst&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;your write-up&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you&amp;#8217;d like to hear about next year&amp;#8217;s event then &lt;a href=&quot;http://eepurl.com/6JcFz&quot;&gt;join this announce list&lt;/a&gt; (it&amp;#8217;ll be super low volume). You probably also want to join our &lt;a href=&quot;http://www.meetup.com/PyData-London-Meetup/&quot;&gt;PyDataLondon meetup&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are other &lt;a href=&quot;http://pydata.org/&quot;&gt;upcoming PyData conferences&lt;/a&gt; including Berlin, Paris and Cologne. Take a look and get involved!&lt;/p&gt;
&lt;p&gt;As an aside &amp;#8211; if your data science team needs coaching, do drop me a line (and take a look at &lt;a href=&quot;https://www.linkedin.com/in/ianozsvald&quot;&gt;my coaching testimonials&lt;/a&gt; on LinkedIn). If you want a job in data science, take a look at my &lt;a href=&quot;http://ianozsvald.com/2016/01/12/data-scientist-jobs-in-london/&quot;&gt;London Python data science jobs list&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
Ian applies Data Science as an AI/Data Scientist for companies in &lt;a href=&quot;http://modelinsight.io/&quot;&gt;ModelInsight&lt;/a&gt;, sign-up for &lt;a href=&quot;http://eepurl.com/Z44HT&quot;&gt;Data Science tutorials in London&lt;/a&gt;. Historically Ian ran &lt;a href=&quot;http://morconsulting.com&quot;&gt;Mor Consulting&lt;/a&gt;. He also founded the image and text annotation API &lt;a href=&quot;http://annotate.io&quot;&gt;Annotate.io&lt;/a&gt;, co-authored &lt;a href=&quot;http://socialtiesapp.com&quot;&gt;SocialTies&lt;/a&gt;, programs Python, authored &lt;a href=&quot;http://thescreencastinghandbook.com&quot;&gt;The Screencasting Handbook&lt;/a&gt;, lives in London and is a consumer of fine coffees.</description>
	<pubDate>Tue, 24 May 2016 09:42:16 +0000</pubDate>
</item>
<item>
	<title>EuroPython: EuroPython 2016 Keynote: Rachel Willmer</title>
	<guid>http://blog.europython.eu/post/144849205747</guid>
	<link>http://blog.europython.eu/post/144849205747</link>
	<description>&lt;p&gt;We are pleased to announce our third keynote speaker for EuroPython 2016: &lt;b&gt;Rachel Willmer&lt;/b&gt;.&lt;/p&gt;&lt;img alt=&quot;image&quot; src=&quot;http://66.media.tumblr.com/d0fae5f87819651e2620b6d9c3d52898/tumblr_inline_o7n5laLNPX1swlzyf_540.jpg&quot; /&gt;&lt;h2&gt;About Rachel Willmer&lt;/h2&gt;&lt;p&gt;Rachel has been working at the “bleeding edge” of technology for 30 years, as programmer, network engineer, manager, startup founder:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;“I remain insatiably curious about how today’s new technology gives birth to tomorrow’s new business opportunity. I am CEO/Founder of &lt;a href=&quot;https://luzme.com/&quot; target=&quot;_blank&quot;&gt;Luzme&lt;/a&gt;, the ebook search site, and a Google Developer Expert (Firebase).”&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;The Keynote: &lt;i&gt;30 years of Fun &amp;amp; Profit Through Technology&lt;/i&gt;&lt;/h2&gt;&lt;p&gt;Have you ever wondered how you could be your own boss? or how you could make money from your side project? or build the next Facebook or Uber.&lt;/p&gt;&lt;p&gt;To be a coder in today&amp;rsquo;s world of work is to have amazing opportunities to design the business life you want.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;“I&amp;rsquo;ve enjoyed the last 20 years without a &amp;lsquo;real job&amp;rsquo;, as company founder, freelancer and side-project-hacker.&lt;/p&gt;&lt;p&gt;Now I am bootstrapping my current company to profitability. Listen to my stories and learn from my mistakes and successes.”&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;With &lt;a href=&quot;http://blog.europython.eu/post/139346712217/europython-2016-sending-out-the-first&quot; target=&quot;_blank&quot;&gt;gravitational&lt;/a&gt; regards,&lt;br /&gt;
–&lt;br /&gt;&lt;a href=&quot;https://ep2016.europython.eu/en/team/&quot; target=&quot;_blank&quot;&gt;EuroPython 2016 Team&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;</description>
	<pubDate>Tue, 24 May 2016 08:28:41 +0000</pubDate>
</item>
<item>
	<title>Talk Python to Me: #60 Scaling Python to 1000's of cores with Ufora</title>
	<guid>https://talkpython.fm/episodes/show/60/scaling-python-to-1000-s-of-cores-with-ufora</guid>
	<link>https://talkpython.fm/episodes/show/60/scaling-python-to-1000-s-of-cores-with-ufora</link>
	<description>You've heard me talk previously about scaling Python and Python performance on this show. But on this episode I'm bringing you a very interesting project pushing the upper bound of Python performance for a certain class of applications. 
&amp;lt;br/&amp;gt;

&amp;lt;br/&amp;gt;
You'll meet Braxton McKee from Ufora. They have developed an entirely new Python runtime that is focused on horizontally scaling Python applications across 1000's of CPU cores and even GPUs. They describe it as &quot;compiled, automatically parallel python for data science&quot;.
&amp;lt;br/&amp;gt;

&amp;lt;br/&amp;gt;
Links from the show:
&amp;lt;br/&amp;gt;
&amp;lt;div style=&quot;font-size: .85em;&quot;&amp;gt;
&amp;lt;br/&amp;gt;
	&amp;lt;b&amp;gt;Ufora Platform&amp;lt;/b&amp;gt;:  &amp;lt;a href='https://ufora.github.io/ufora/' target='_blank'&amp;gt;ufora.github.io/ufora/&amp;lt;/a&amp;gt;
&amp;lt;br/&amp;gt;
	&amp;lt;b&amp;gt;Ufora on Github&amp;lt;/b&amp;gt;:  &amp;lt;a href='https://github.com/ufora/ufora' target='_blank'&amp;gt;github.com/ufora&amp;lt;/a&amp;gt;
&amp;lt;br/&amp;gt;
	&amp;lt;b&amp;gt;Ufora company&amp;lt;/b&amp;gt;:  &amp;lt;a href='http://www.ufora.com/' target='_blank'&amp;gt;ufora.com&amp;lt;/a&amp;gt;
&amp;lt;br/&amp;gt;
	&amp;lt;b&amp;gt;Braxton on Twitter&amp;lt;/b&amp;gt;:  &amp;lt;a href='https://twitter.com/braxtonmckee' target='_blank'&amp;gt;@braxtonmckee&amp;lt;/a&amp;gt;
&amp;lt;br/&amp;gt;
&amp;lt;/div&amp;gt;</description>
	<pubDate>Tue, 24 May 2016 08:00:00 +0000</pubDate>
</item>
<item>
	<title>Davy Wybiral: Quantum Circuit Simulator</title>
	<guid>http://davywybiral.blogspot.com/2012/12/quantum-circuit-simulator.html</guid>
	<link>http://davywybiral.blogspot.com/2012/12/quantum-circuit-simulator.html</link>
	<description>All I wanted for Christmas was a &lt;a href=&quot;http://en.wikipedia.org/wiki/Quantum_circuit&quot;&gt;quantum circuit&lt;/a&gt; simulator. So I wrote one in Javascript using &lt;a href=&quot;http://www.numericjs.com/&quot;&gt;NumericJS&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span&gt;Check it out:&lt;/span&gt;&lt;span&gt; &lt;a href=&quot;http://www.davyw.com/quantum&quot;&gt;http://www.davyw.com/quantum&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;For a good &quot;Hello world&quot; circuit, here's the diagram for a &lt;a href=&quot;http://en.wikipedia.org/wiki/Bell_state&quot;&gt;Bell State&lt;/a&gt;...&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-iq06E9AHecc/UNsiJpb-M5I/AAAAAAAAAnc/0rBGvGsZSU0/s1600/bellstate.png&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;80&quot; src=&quot;https://2.bp.blogspot.com/-iq06E9AHecc/UNsiJpb-M5I/AAAAAAAAAnc/0rBGvGsZSU0/s400/bellstate.png&quot; width=&quot;80&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;Try evaluating it yourself and see that |00&amp;gt; or |11&amp;gt; are the only possible outcomes.&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;You can even compile your own circuits into gates to use in other circuits.&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;Construct a circuit that transforms a single qubit into |0&amp;gt; with 75% probability and |1&amp;gt; with 25% probability, such as:&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-kMSXFitvWak/UNskMUa9vlI/AAAAAAAAAns/b3RyxmUU0y8/s1600/superposition.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://1.bp.blogspot.com/-kMSXFitvWak/UNskMUa9vlI/AAAAAAAAAns/b3RyxmUU0y8/s1600/superposition.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;Then compile that into gate &quot;F&quot; and use it to create a superposition of |00&amp;gt; with 75% prob and |11&amp;gt; with 25% prob, like this:&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-CAoQnWbVufY/UNsk4_7k4vI/AAAAAAAAAn0/f1wYhqqVUTw/s1600/superposition2.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://3.bp.blogspot.com/-CAoQnWbVufY/UNsk4_7k4vI/AAAAAAAAAn0/f1wYhqqVUTw/s1600/superposition2.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;Let me know if you find any use out of this. And definitely let me know if you find any bugs.&lt;/div&gt;</description>
	<pubDate>Mon, 23 May 2016 18:47:00 +0000</pubDate>
</item>
<item>
	<title>Kushal Das: dgplug summer training student Tosin Damilare James Animashaun</title>
	<guid>https://kushaldas.in/posts/dgplug-summer-training-student-tosin-damilare-james-animashaun.html</guid>
	<link>https://kushaldas.in/posts/dgplug-summer-training-student-tosin-damilare-james-animashaun.html</link>
	<description>&lt;!--
.. title: dgplug summer training student Tosin Damilare James Animashaun
.. slug: dgplug-summer-training-student-tosin-damilare-james-animashaun
.. date: 2016-05-23T23:15:53+05:30
.. tags: dgplug, Fedora, Python
.. link:
.. description:
.. type: text
--&gt;

&lt;p&gt;&lt;img src=&quot;https://kushaldas.in/images/tosin.jpg&quot; alt=&quot;&quot; /&gt;
&lt;/p&gt;

&lt;h3&gt;Your name (blog/twitter) and what do you do&lt;/h3&gt;

&lt;p&gt;My name is Tosin Damilare James Animashaun (&lt;em&gt;IRC&lt;/em&gt;: &lt;strong&gt;acetakwas&lt;/strong&gt;; &lt;em&gt;Twitter&lt;/em&gt;:
&lt;strong&gt;&lt;a href=&quot;https://twitter.com/acetakwas&quot;&gt;@acetakwas&lt;/a&gt;&lt;/strong&gt;; &lt;em&gt;Github&lt;/em&gt;:
&lt;strong&gt;&lt;a href=&quot;https://github.com/takwas&quot;&gt;github.com/takwas&lt;/a&gt;&lt;/strong&gt;, &lt;em&gt;Blog&lt;/em&gt;:
&lt;strong&gt;&lt;a href=&quot;http://takwas.github.io&quot;&gt;takwas.github.io&lt;/a&gt;&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;I am currently a part-time Software Engineering student at &lt;a href=&quot;http://niitlagos.com/&quot;&gt;NIIT,
Lagos&lt;/a&gt;. I am also a co-founder at a startup called
&lt;a href=&quot;http://krohx.com&quot;&gt;Krohx&lt;/a&gt;. We are in the final stages of deploying a
&lt;a href=&quot;http://jobnownow.com/&quot;&gt;job/hiring web platform&lt;/a&gt; that targets seekers of
short-term jobs while also easing the process of getting service delivery for
the hirers.&lt;/p&gt;

&lt;p&gt;With my involvements with the burgeoning &lt;a href=&quot;https://wiki.python.org/moin/LocalUserGroups#nigeria&quot;&gt;Python community in
Nigeria&lt;/a&gt;, I recently got
elected as secretary for the organization.&lt;/p&gt;

&lt;h3&gt;How did you learn about the training? (++ My Experience) I fail to recall&lt;/h3&gt;

&lt;p&gt;exactly how I learnt about the community now, but I remember joining the
mailing list and going on from there. This was in fact my first time of joining
a mailing list. Upon learning about the #dgplug IRC channel, I promptly
enlisted the channel to my IRC client&amp;rsquo;s &lt;em&gt;favourites&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I was so enthusiastic about this, as I had no prior experience of an online
tutoring session. The feeling was truly exhilarating.&lt;/p&gt;

&lt;p&gt;Having come from a Java background, I was really interested in learning the
Python programming language as soon as I caught on waves with. At the time, I
had volunteered to write some scripts to help automate some of the manual
processing of NIIT&amp;rsquo;s annual scholarship exam records/documents at my school for
that year. I accomplished that using Java, but in hind-sight, I feel I could
have saved a lot of time if I had utilised Python in the situation.&lt;/p&gt;

&lt;p&gt;This was a blog post I wrote as part of tasks given to us. I have failed to
maintain that blog though. I now write &lt;a href=&quot;http://takwas.github.io/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;How this training changed (if at all) your life?  Python is surely the more&lt;/h3&gt;

&lt;p&gt;beginner-friendly language and it&amp;rsquo;s making its rounds these days. Every
programmer should have it in their arsenal. One of the things I love most about
the language is it versatility in application.&lt;/p&gt;

&lt;p&gt;No doubt, I have continued to improve with Python everyday, but more so in my
programming journey. I have become more and more familiar with various
mainstream concepts and tools. The idea of contributing to open-source can be
overwhelming at first, but following the path laid out in this course, one
would be surprised to learn how easy it could be.&lt;/p&gt;

&lt;p&gt;I have volunteered to mentor attendees at a &lt;a href=&quot;https://djangogirls.org/lagos/&quot;&gt;Django Girls
workshop&lt;/a&gt;, which held in Lagos, Nigeria. I
picked-up Django in a week prior to the event, because frankly, there wasn&amp;rsquo;t
much of a learning curve to it since I already used Flask, a different
Python-based web development framework.&lt;/p&gt;

&lt;p&gt;Flask was a framework I first got introduced to at the summer training, but I
did not revisit it until months later. As a backend web-developer, I now do
most of my work in Flask.&lt;/p&gt;

&lt;p&gt;In my experience, there is no better or faster way to grow, than to
collaborate; and that is what open source preaches. Note that &lt;em&gt;growth&lt;/em&gt; here is
not only about the project, but the growth applies to each contributing
individual. Heck, even if you do not contribute, &lt;em&gt;&lt;a href=&quot;https://blog.codinghorror.com/learn-to-read-the-source-luke/&quot;&gt;you will grow by reading
good open-source
code&lt;/a&gt;&lt;/em&gt; &amp;ndash; this I
can attest to. And joining the dgplug community has surely made open-source a
more approachable endeavour.  # #&lt;/p&gt;

&lt;h3&gt;Have you contributed to any upstream project(s)? If yes, then details.&lt;/h3&gt;

&lt;p&gt;While (and a bit disappointingly) I have yet to contribute to an upstream
project, I do have quite a number of them lined up. Most probably, the first
would be to the [official Slack Client]() written in Python. Having recently
developed &lt;a href=&quot;https://github.com/votebot&quot;&gt;a bot&lt;/a&gt;, which was used in conducting the
election of committee members of the &lt;a href=&quot;https://wiki.python.org/moin/LocalUserGroups#nigeria&quot;&gt;Python Users Nigeria
Group&lt;/a&gt;, I do have a
number of changes I plan to push to the aforementioned API library.&lt;/p&gt;

&lt;p&gt;With &lt;a href=&quot;https://github.com/takwas/theb0t&quot;&gt;this forked project&lt;/a&gt;, I have also tried
my hands at revamping the architecture of the official dgplug bot
&lt;strong&gt;&lt;a href=&quot;https://github.com/sayanchowdhury/theb0t&quot;&gt;ekanora&lt;/a&gt;&lt;/strong&gt;, which is used in
running the summer training sessions.&lt;/p&gt;

&lt;p&gt;Some other projects I&amp;rsquo;d like to contribute to include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/StellarCN/py-stellar-base&quot;&gt;https://github.com/StellarCN/py-stellar-base&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/getpelican/pelican-blog&quot;&gt;https://github.com/getpelican/pelican-blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Any tips for the next batch of participants. (++Final words)&lt;/h3&gt;

&lt;p&gt;I am not sure I am in the best position to answer this. However, I would advise
that you endeavour to remain focused through this; simply keep at it. Even if
your experience at the summer camp doesn&amp;rsquo;t go as you expect, you should
definitely not count it loss. Instead, make it a reason to put in more effort
and grow as you go.&lt;/p&gt;

&lt;p&gt;Depending on your personal activity schedule, you might miss one/two classes.
But that shouldn&amp;rsquo;t deter you from continuing the program. The
&lt;a href=&quot;https://dgplug.org/irclogs/&quot;&gt;logs&lt;/a&gt; are available for covering such lapses.
Also, you could consult the &lt;a href=&quot;https://summertraining.readthedocs.io/en/latest/&quot;&gt;summer training
docs&lt;/a&gt; to get a hang of the
agenda, so you can anticipate classes beforehand and be better prepared.&lt;/p&gt;

&lt;p&gt;While I participated in the training, there were times when there was no power
supply, and I had to use my phone. Thankfully, there are IRC clients for mobile
phones (I recommend
&lt;a href=&quot;https://play.google.com/store/apps/details?id=net.andchat&amp;hl=en&quot;&gt;AndChat&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The class sessions have a few rules, and the community would love it if you
played by them. Not to worry, they are no stringent rules; just there to keep
everyone behaving. For instance, the use of
&lt;a href=&quot;https://en.wikipedia.org/wiki/SMS_language&quot;&gt;SMS-speak&lt;/a&gt; is discouraged.&lt;/p&gt;

&lt;p&gt;You should keep notes beside you when attending the sessions. Writing is a good
way to memorize things in my opinion. Also, although most clients would have
this by default, you should ensure your IRC client is configured to log
conversations. Going back over what you&amp;rsquo;ve learnt would do you great good as
you mightn&amp;rsquo;t be able to keep up with the speed of the class at times.&lt;/p&gt;

&lt;p&gt;If you have some time before program begins, two things I&amp;rsquo;d advise you become
familiar with are: - Your OS (Linux, preferably &lt;strong&gt;Fedora&lt;/strong&gt; or &lt;strong&gt;Ubuntu&lt;/strong&gt;) - An
IRC client (I suggest &lt;strong&gt;HexChat&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;I learned quite a lot from the summer training. I was really obsessed with
attending &lt;em&gt;whenever I could&lt;/em&gt;. Although coming from a different country, the
timing wasn&amp;rsquo;t favourable, often meeting me in the middle of the day&amp;rsquo;s
activities &amp;ndash; school especially. I made efforts to invite a few friends to join
on &amp;ndash; one or two did, but the determination to keep on was obviously lacking,
which reminds me of a statement I heard a while back that reads something like
this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;If 40 people begin a course like this together, only about 5 get to
finish.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That in my experience is very often the case. Be aware that a lot of people are
on this bandwagon. The question to ask yourself, is &amp;ldquo;Do I want to be among the
surviving commutants at the end of this journey?&amp;rdquo; Unless you plan to experiment
with this experience, if your answer is yes, then I congratulate you as you
begin the journey that could potentially kick-start your software engineering
career/journey.&lt;/p&gt;

&lt;p&gt;Know this, free and open source software is for the good of &lt;em&gt;all&lt;/em&gt;. The &lt;strong&gt;open
source community is wide&lt;/strong&gt; and continues to grow. &lt;strong&gt;It welcomes all and
sundry&lt;/strong&gt;, &lt;em&gt;but it poses a few hurdles to sieve the wheat from the chaff&lt;/em&gt;. In
the end, the gains are worth it.&lt;/p&gt;</description>
	<pubDate>Mon, 23 May 2016 17:45:00 +0000</pubDate>
</item>
<item>
	<title>Trey Hunner: Weekly Python Chat: Live From PyCon</title>
	<guid>https://treyhunner.com/2016/05/weekly-python-chat-live-from-pycon/</guid>
	<link>https://treyhunner.com/2016/05/weekly-python-chat-live-from-pycon/</link>
	<description>&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: If you&amp;rsquo;ve never been to PyCon and are curious what the big deal is about, sign up for the &lt;a href=&quot;http://ccst.io/e/pycon&quot;&gt;PyCon Day 1 live chat&lt;/a&gt; and &lt;a href=&quot;http://ccst.io/e/sprints&quot;&gt;PyCon Sprints live chat&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have been holding live webcasts every week for almost 2 months now.  I started this trend after my &lt;a href=&quot;http://treyhunner.com/2016/03/regular-expressions-in-python-webinar/&quot;&gt;regular expressions webinar&lt;/a&gt; in March.  I soon came up with a name and made a website for these &lt;a href=&quot;https://twitter.com/treyhunner/status/720758046117343236&quot;&gt;weekly python chat&lt;/a&gt; events.  Now there&amp;rsquo;s also a &lt;a href=&quot;https://twitter.com/PythonChat&quot;&gt;Twitter account&lt;/a&gt; and a &lt;a href=&quot;https://www.facebook.com/PythonChat&quot;&gt;Facebook page&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Guest speakers and other experimentation&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve really enjoyed holding these events.  The audience participation has been great: ample questions and plenty of helpful chat adding on to the discussion and occasionally correcting my mistakes.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been experimenting with the chat format by bringing in guest speakers the last couple weeks and I plan to introduce more general topics occasionally in the future.&lt;/p&gt;

&lt;h2&gt;Web chats about PyCon, live from PyCon&lt;/h2&gt;

&lt;p&gt;Next week I&amp;rsquo;ll be continuing my experimentation by hosting two Weekly Python Chat events &lt;strong&gt;live from PyCon&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The first chat next week will be during the first day of PyCon.  I will likely be in the hallway accompanied by a couple other Python friends.  We&amp;rsquo;ll answer your questions about what there is to do at PyCon, how it&amp;rsquo;s different from other cons, and why we go.&lt;/p&gt;

&lt;p&gt;The second chat will be during the first day of the sprints.  We&amp;rsquo;ll chat about who the sprints are for, how new contributors can get involved with the sprints, and what makes the sprints rewarding.&lt;/p&gt;

&lt;h2&gt;I want to convince you to join me at PyCon 2017&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://treyhunner.com/images/pycon-badge.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;ve never attended the sprints, sign up for the second chat to ask your questions and state your concerns.  Hopefully I can convince you to stay for the sprints next time.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;ve never been to PyCon, sign up for both chats and voice your questions and concerns in each.  I will address your questions and concerns, even if you can&amp;rsquo;t make the live event.  &lt;strong&gt;Both chats will be recorded&lt;/strong&gt; and you can re-watch them afterward.&lt;/p&gt;

&lt;h3&gt;Chat 1: Live from Day 1 of PyCon&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Monday&lt;/strong&gt; May 30, 2016 at &lt;strong&gt;3:30pm&lt;/strong&gt; PDT&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll discuss &lt;strong&gt;what PyCon is all about&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://ccst.io/e/pycon&quot;&gt;Sign up here to attend the PyCon Day 1 live chat&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;Chat 2: Live from the PyCon sprints&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Thursday&lt;/strong&gt; June 2, 2016 at &lt;strong&gt;11:00am&lt;/strong&gt; PDT&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll chat about &lt;strong&gt;how the sprints work&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://ccst.io/e/sprints&quot;&gt;Sign up here to attend the PyCon Sprints live chat&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;Get in touch&lt;/h2&gt;

&lt;p&gt;Have questions?  Want to share your PyCon experiences during the live chat?  Going to PyCon next week and want to meet up?  &lt;a href=&quot;mailto:tr%65y%40t%72%75t%68%66ul.tec%68n%6flo%67%79&quot;&gt;Contact me&lt;/a&gt;!&lt;/p&gt;</description>
	<pubDate>Mon, 23 May 2016 16:00:00 +0000</pubDate>
</item>
<item>
	<title>PyCharm: PyCharm 2016.1.4 RC is Available</title>
	<guid>http://feedproxy.google.com/~r/Pycharm/~3/uGoIuIgcb9w/</guid>
	<link>http://feedproxy.google.com/~r/Pycharm/~3/uGoIuIgcb9w/</link>
	<description>&lt;p&gt;&lt;span&gt;Today we announce the &lt;/span&gt;&lt;a href=&quot;https://confluence.jetbrains.com/display/PYH/JetBrains+PyCharm+Preview+%28EAP%29&quot;&gt;&lt;span&gt;PyCharm 2016.1.4 Release Candidate&lt;/span&gt;&lt;/a&gt;&lt;span&gt; build #&lt;/span&gt;&lt;span&gt;145.1503&lt;/span&gt;&lt;span&gt;. The list of bug fixes and improvements for this build can be found in the &lt;/span&gt;&lt;a href=&quot;https://confluence.jetbrains.com/display/PYH/PyCharm+145.1503.16+Release+Notes&quot;&gt;&lt;span&gt;release notes&lt;/span&gt;&lt;/a&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Some highlights of the PyCharm 2016.1.4 RC are:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span&gt;numerous performance improvements along with fixes for various hangs&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;a number of fixes for Docker-based python interpreters and Docker Compose support&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;a fix for exception while renaming a string format parameter &lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;and much more&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span&gt;Patch updates from the previous PyCharm releases should be available shortly.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Please give &lt;/span&gt;&lt;a href=&quot;https://confluence.jetbrains.com/display/PYH/JetBrains+PyCharm+Preview+%28EAP%29&quot;&gt;&lt;span&gt;PyCharm 2016.1.4 RC&lt;/span&gt;&lt;/a&gt;&lt;span&gt; a try before its official release and please report any bugs and feature request to our &lt;/span&gt;&lt;a href=&quot;https://youtrack.jetbrains.com/issues/PY&quot;&gt;&lt;span&gt;issue tracker&lt;/span&gt;&lt;/a&gt;&lt;i&gt;&lt;span&gt;.&lt;/span&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;&lt;span&gt;-PyCharm team&lt;/span&gt;&lt;/i&gt;&lt;/p&gt;
&lt;img src=&quot;http://feeds.feedburner.com/~r/Pycharm/~4/uGoIuIgcb9w&quot; height=&quot;1&quot; width=&quot;1&quot; alt=&quot;&quot; /&gt;</description>
	<pubDate>Mon, 23 May 2016 13:04:27 +0000</pubDate>
</item>
<item>
	<title>Doug Hellmann: bisect — Maintain Lists in Sorted Order — PyMOTW 3</title>
	<guid>http://feeds.doughellmann.com/~r/doughellmann/python/~3/knL3DA02yVI/</guid>
	<link>http://feeds.doughellmann.com/~r/doughellmann/python/~3/knL3DA02yVI/</link>
	<description>The bisect module implements an algorithm for inserting elements into a list while maintaining the list in sorted order. Read more&amp;#8230; This post is part of the Python Module of the Week series for Python 3. See PyMOTW.com for more articles from the series.&lt;div class=&quot;feedflare&quot;&gt;
&lt;a href=&quot;http://feeds.doughellmann.com/~ff/doughellmann/python?a=knL3DA02yVI:osHK7IPtbjg:yIl2AUoC8zA&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/doughellmann/python?d=yIl2AUoC8zA&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.doughellmann.com/~ff/doughellmann/python?a=knL3DA02yVI:osHK7IPtbjg:7Q72WNTAKBA&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/doughellmann/python?d=7Q72WNTAKBA&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.doughellmann.com/~ff/doughellmann/python?a=knL3DA02yVI:osHK7IPtbjg:V_sGLiPBpWU&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/doughellmann/python?i=knL3DA02yVI:osHK7IPtbjg:V_sGLiPBpWU&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/doughellmann/python/~4/knL3DA02yVI&quot; height=&quot;1&quot; width=&quot;1&quot; alt=&quot;&quot; /&gt;</description>
	<pubDate>Mon, 23 May 2016 13:00:11 +0000</pubDate>
</item>
<item>
	<title>Mike Driscoll: PyDev of the Week: Wesley Chun</title>
	<guid>http://www.blog.pythonlibrary.org/2016/05/23/pydev-of-the-week-wesley-chun/</guid>
	<link>http://www.blog.pythonlibrary.org/2016/05/23/pydev-of-the-week-wesley-chun/</link>
	<description>&lt;div class=&quot;pf-content&quot;&gt;&lt;div&gt;This week we welcome Wesley Chun as our PyDev of the Week! Wesley Chun, MSCS, is author of Prentice Hall&amp;#8217;s bestselling &amp;#8220;Core Python&amp;#8221; series (&lt;a href=&quot;http://corepython.com/&quot; target=&quot;_blank&quot;&gt;corepython.com&lt;/a&gt;), the &amp;#8220;Python Fundamentals&amp;#8221; companion videos, co-author of &amp;#8220;Python Web Development with Django&amp;#8221; (&lt;a href=&quot;http://withdjango.com/&quot; target=&quot;_blank&quot;&gt;withdjango.com&lt;/a&gt;), and has written for Linux Journal, CNET, and InformIT. In addition to being an engineer at Google, he runs CyberWeb (&lt;a href=&quot;http://cyberwebconsulting.com/&quot; target=&quot;_blank&quot;&gt;cyberwebconsulting.com&lt;/a&gt;), a consultancy specializing in Python training. Wesley has over 25 years of programming, teaching, and writing experience, including more than a decade of Python. While at Yahoo!, helped create Yahoo!Mail using Python. Wesley holds degrees in Computer Science, Mathematics, and Music from the University of California. He is based in Silicon Valley and can be reached on Twitter (&lt;a href=&quot;http://twitter.com/wescpy&quot; target=&quot;_blank&quot;&gt;twitter.com/wescpy&lt;/a&gt;) or Google+ (&lt;a href=&quot;http://google.com/+WesleyChun&quot; target=&quot;_blank&quot;&gt;google.com/+WesleyChun&lt;/a&gt;). Let&amp;#8217;s spend a few minutes getting to know him better!&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;div&gt;&lt;img class=&quot;aligncenter size-full wp-image-5386&quot; src=&quot;http://www.blog.pythonlibrary.org/wp-content/uploads/2016/03/chun_wesley_c.jpg&quot; alt=&quot;chun_wesley_c&quot; width=&quot;125&quot; height=&quot;125&quot; /&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;div&gt;&lt;strong&gt;Can you tell us a little about yourself (hobbies, education, etc):&lt;/strong&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;div&gt;&lt;em&gt;I&amp;#8217;ve been a software engineer by profession, coding in Python, JavaScript, and a few others, at big companies as well as startups. I&amp;#8217;m currently at Google, a nice blend of both worlds. I enjoy helping the next generation of developers get up-to-speed on the latest technologies and best practices with the least amount of friction, meaning that in addition to coding, I also teach technology, publish books &amp;amp; blogposts, and give talks at conferences. Stuff I like to do away from the keyboard include family time, piano, personal finance, world travel, physical fitness (cycling, yoga, biking, basketball), poker, and learning a few words in as many languages as I can&lt;/em&gt;.&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;span id=&quot;more-5385&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;strong&gt;Why did you start using Python?&lt;/strong&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;div&gt;&lt;em&gt;After leaving Sun Microsystems in the mid-90s with C and a few scripting languages under my belt, I went to a startup where our small team of ~10 engineers built what was eventually to become Yahoo!Mail using Python at a time when very few people had ever heard of it. It was amazing how fast we could create our own web framework and build the mail service with. It was like a breath of fresh air, and learning Python at that job changed the course of the rest of my career. Because of its uniqueness at encouraging group collaboration and being both powerful and expressive, I really didn&amp;#8217;t want to work in any other language ever again. As a result, I&amp;#8217;ve quite a challenging and rewarding career as a senior engineer working at companies where Python is a primary development tool.&lt;/em&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;div&gt;&lt;strong&gt;What other programming languages do you know and which is your favorite?&lt;/strong&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;div&gt;&lt;em&gt;In high school, I was exposed to programming in (Commodore) BASIC, FORTRAN, 6502 assembly, and Pascal. I added Logo and C to that collection in college. These days, I mostly tinker in Unix shell, Python, and JavaScript, with some Java, C++, Dart, and Go thrown in there. This is my 20th year coding in Python, so I&amp;#8217;ll stick with that for a little while longer.&lt;/em&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;div&gt;&lt;strong&gt;What projects are you working on now?&lt;/strong&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;div&gt;&lt;em&gt;I&amp;#8217;ve officially started work on the 3rd edition of my well-received, &amp;#8220;Core Python Programming&amp;#8221; book. The 2nd edition (ISBN 0132269937) is still doing quite well, and with all the new material going into it, the publishers and I have split that original book of two parts into two volumes. The 3rd edition of part 2 has already published as &amp;#8220;Core Python: Applications Programming&amp;#8221; (ISBN 0132678209), so now I need to complete the 3rd ed. of part 1 (tentatively called, &amp;#8220;Core Python: Language Fundamentals&amp;#8221;. It will feature both Python 2 and 3 prominently. We&amp;#8217;re at the crossroads whereby adoption of 3.x has picked up, so while much legacy code still runs 2.x, there&amp;#8217;s no reason why a new book should focus solely on either version, but can serve the community better as a bridge between both worlds.&lt;/em&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;div&gt;&lt;em&gt;At work, I&amp;#8217;m currently bringing the goodness of Google developer tools, APIs, and platforms to the global community. I advocate for our devtools to engineers in industry as well as the next generation in the classroom, building sample code, writing about best practices, making product announcements, and creating Python or JavaScript-flavored developer videos (&lt;a href=&quot;http://goo.gl/kFMUa6&quot; target=&quot;_blank&quot;&gt;http://goo.gl/kFMUa6&lt;/a&gt;) that help on-board developers with integrating Google techologies into the web, mobile, and server-side apps *they&amp;#8217;re* building. If it&amp;#8217;s Python, then there&amp;#8217;s a high likelihood that a deeper dive into the code covered in the video will be featured on my Python blog (&lt;a href=&quot;http://wescpy.blogspot.com/&quot; target=&quot;_blank&quot;&gt;wescpy.blogspot.com&lt;/a&gt;).&lt;/em&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;div&gt;&lt;strong&gt;Which Python libraries are your favorite (core or 3rd party)?&lt;/strong&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;div&gt;&lt;em&gt;I don&amp;#8217;t really have one particular favorite. I think everyone should learn unittest. I thought doctest was pretty awesome the first time I heard of it. I feel that csv, json, and the xml and email packages are &amp;#8220;must-have&amp;#8221;s in every Python developers toolbox. I also think large tools like pip, ipython, Jupyter (formerly &amp;#8220;IPython Notebook&amp;#8221;), Django, Pyramid, and Sphinx are pretty awesome. Finally, I think that the Google APIs Client Library for Python is also great because it gives Python developers access to integrating the use of Google APIs into any Python script.&lt;/em&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;div&gt;&lt;strong&gt;Where do you see Python going as a programming language?&lt;/strong&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;div&gt;&lt;em&gt;Since I started learning Python way back in 1997 with 1.4(!), it has taken off like a weed. Back then, Python appeared on NO job listings whatsoever. In fact, at the startup where I learned Python, they had no expectations that anyone knew any Python. Today, it&amp;#8217;s fairly clear that Python is everywhere and continues to grow in mindshare. Now developers can have an entire career writing Python code, and better yet, the next generation will also be familiar with it as it&amp;#8217;s being taught in primary and secondary schools in addition to many colleges and universities worldwide!&lt;/em&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;div&gt;&lt;em&gt;The next step for Python is the growth of 3.x adoption. Many are skeptical when they hear that &amp;#8220;no one&amp;#8221; has been using it since it came out at the end of 2008 which isn&amp;#8217;t true. It&amp;#8217;s just that the term &amp;#8220;backwards-incompatible&amp;#8221; tends to scare the timid away and requires porting of dependencies before considering migration. Fortunately most experienced Python developers recognize that while it *is* a big deal, the core language itself isn&amp;#8217;t changing in a way that 2.x developers would be completely lost. It&amp;#8217;s not being rewritten from scratch. Much progress has already been made on the porting front, and it represents a good opportunity to continue Python&amp;#8217;s growth and evolution as all new features are only going into the 3.x branch. When it first came out, I called for adoption to take a decade because it was backwards-incompatible &amp;#8212; I have about two years left on this prediction, so I&amp;#8217;m curious how things will turn out.&lt;/em&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;div&gt;&lt;strong&gt;What is your take on the current market for Python programmers?&lt;/strong&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;div&gt;&lt;em&gt;It can&amp;#8217;t be a more exciting time for Python developers. With the growing mindshare and number of libraries and jobs available in all industries, the future for Python developers has never been brighter. I will continue to support the community with books, talks, volunteering, and general advocacy. I hope to continue bringing new engineers into the Python community, which while not a language feature, is one of the best things about Python itself.&lt;/em&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;div&gt;&lt;strong&gt;Is there anything else you’d like to say?&lt;/strong&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;div&gt;&lt;em&gt;Hope to see you all at PyCon next week or in one of my future courses!!&lt;/em&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;div&gt;&lt;strong&gt;Thanks for doing the interview!&lt;/strong&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/div&gt;</description>
	<pubDate>Mon, 23 May 2016 12:30:57 +0000</pubDate>
</item>
<item>
	<title>Graeme Cross: PyCon AU 2016 registrations are open!</title>
	<guid>http://www.curiousvenn.com/2016/05/pycon-au-2016-registrations-are-open/</guid>
	<link>http://www.curiousvenn.com/2016/05/pycon-au-2016-registrations-are-open/</link>
	<description>&lt;p&gt;Online registration is now open for &lt;a href=&quot;https://2016.pycon-au.org&quot; target=&quot;_blank&quot;&gt;PyCon Australia 2016&lt;/a&gt;, including for the &lt;a href=&quot;https://2016.pycon-au.org/programme/science_and_data_miniconf&quot;&gt;Science and Data miniconference&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The seventh PyCon Australia is being held in Melbourne, Victoria from August 12th – 16th at the Melbourne Convention and Exhibition Centre, and will draw hundreds of Python developers, enthusiasts and students from Australasia and afar.&lt;/p&gt;
&lt;p&gt;Starting today, early bird offers are up for grabs. To take advantage of these discounted ticket rates, be among the first 90 to register. To begin the registration process, and find out more about each level of ticket, visit &lt;a href=&quot;https://2016.pycon-au.org/register/prices&quot; target=&quot;_blank&quot;&gt;the conference registration page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;PyCon Australia has endeavoured to keep tickets as affordable as possible, and &lt;a href=&quot;https://2016.pycon-au.org/about/financial_assistance&quot; target=&quot;_blank&quot;&gt;financial assistance is also available&lt;/a&gt;. We are able to make such offers thanks to our Sponsors and Contributors.&lt;/p&gt;</description>
	<pubDate>Sun, 22 May 2016 23:26:34 +0000</pubDate>
</item>
<item>
	<title>Evennia: Evennia 0.6 !</title>
	<guid>http://evennia.blogspot.com/2016/05/evennia-06.html</guid>
	<link>http://evennia.blogspot.com/2016/05/evennia-06.html</link>
	<description>&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-2Axqwk9ps84/Ui8fvdZ3ReI/AAAAAAAAB-M/_W0YsmCG6BwRv8a01AOG-nXfYws5wCilwCKgB/s1600/evennia_logo_small.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://1.bp.blogspot.com/-2Axqwk9ps84/Ui8fvdZ3ReI/AAAAAAAAB-M/_W0YsmCG6BwRv8a01AOG-nXfYws5wCilwCKgB/s1600/evennia_logo_small.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;As of today, I merged the development branch to make version 0.6 of the MU* development system and server Evennia. &lt;br /&gt;&lt;br /&gt;Evennia 0.6 comes with a lot of updates, mainly in the way Evennia talks to the outside world. All communication is now standardized, so there are no particular treatment of things like text - text is just one of any standardized commands being passed between the server the client (whether over telnet, ssh, websockets or ajax/comet). &lt;br /&gt;&lt;br /&gt;For example the user can now easily plug in &quot;inputfuncs&quot; to handle any data coming from the client. If you want your client to offer some particular functionality, you just need to plop in a python function to handle it, server-side. We also now offer a lot of utility functions for things like monitoring change (tell the client whenever your health status changes so it can update a health bar or flash the screen).&lt;br /&gt;&lt;br /&gt;The HTML5 webclient has itself updated considerably. Most is happening behind the scenes though. Notably the webclient's javascript component is split into two:&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot;&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-vx-uriUXOjI/V0If9Q3TcVI/AAAAAAAAEm4/35haAV1OyAoafjxwHP8wMcOad4CC4OpkQCLcB/s1600/evennia_screen.png&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;284&quot; src=&quot;https://1.bp.blogspot.com/-vx-uriUXOjI/V0If9Q3TcVI/AAAAAAAAEm4/35haAV1OyAoafjxwHP8wMcOad4CC4OpkQCLcB/s400/evennia_screen.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;&amp;nbsp;evennia.js&lt;/b&gt;, acts as a library for handling all communication with the server part of Evennia. It offers events for a gui library to plug into and send/receive. It will also gracefully degrade from a websocket connection to AJAX/COMET long-polling if the player uses an older browser.&amp;nbsp;&lt;/li&gt;&lt;li&gt;&lt;b&gt;evennia_gui.js &lt;/b&gt;is the default front-end and implements a traditional and stable &quot;telnet-like&quot; interface. The html part uses uses Django templating to make it easy to customize and expand. Since this simply makes use of the resources offered by evennia.js, one could pretty easily slip in some other gui library here, or set up calls to get all sorts of interesting information from the server (which talks back using inputfuncs).&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;There are a truckload of more updates and features that are covered &lt;a href=&quot;https://groups.google.com/forum/#!category-topic/evennia/evennia-news/Ik8hi7ajZlI&quot; target=&quot;_blank&quot;&gt;on the mailing list&lt;/a&gt;.&lt;br /&gt;.&lt;br /&gt;Griatch &lt;br /&gt;&lt;br /&gt;</description>
	<pubDate>Sun, 22 May 2016 23:17:13 +0000</pubDate>
</item>
<item>
	<title>Richard Jones: PyCon Australia 2016: Registration Opens!</title>
	<guid>http://www.mechanicalcat.net/richard/log/Python/PyCon_Australia_2016__Registration_Opens</guid>
	<link>http://www.mechanicalcat.net/richard/log/Python/PyCon_Australia_2016__Registration_Opens</link>
	<description>&lt;p&gt;
We are delighted to announce that online registration is now open for &lt;a href=&quot;https://2016.pycon-au.org&quot;&gt;PyCon Australia 2016&lt;/a&gt;. The seventh PyCon Australia is being held in Melbourne, Victoria from August 12th – 16th at the Melbourne Convention and Exhibition Centre, will draw hundreds of Python developers, enthusiasts and students from Australasia and afar.
&lt;/p&gt;&lt;p&gt;

Starting today, early bird offers are up for grabs. To take advantage of these discounted ticket rates, be among the first 90 to register. Early bird registration starts from $60 for full-time students, $190 for enthusiasts and $495 for professionals. Offers this good won’t last long, so &lt;a href=&quot;https://2016.pycon-au.org&quot;&gt;register right away&lt;/a&gt;.
&lt;/p&gt;&lt;p&gt;

&lt;b&gt;We strongly encourage attendees to organise their accommodation as early as possible, as demand for cheaper rooms is very strong during the AFL season.&lt;/b&gt;
&lt;/p&gt;&lt;p&gt;

PyCon Australia has endeavoured to keep tickets as affordable as possible. Financial assistance is also available: for information about eligibility, head to &lt;a href=&quot;https://2016.pycon-au.org/about/financial_assistance&quot;&gt;our financial assistance page&lt;/a&gt; and apply. We are able to make such offers thanks to our Sponsors and Contributors.
&lt;/p&gt;&lt;p&gt;

To begin the registration process, and find out more about each level of ticket, visit &lt;a href=&quot;https://2016.pycon-au.org/register/prices&quot;&gt;our registration information page&lt;/a&gt;.
&lt;/p&gt;&lt;p&gt;


&lt;b&gt;Important Dates to Help You Plan&lt;/b&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;22 May: Registration opens - ‘Early bird’ prices for the first 90 tickets
&lt;/li&gt;&lt;li&gt;
17 June: Last day to apply for financial assistance
&lt;/li&gt;&lt;li&gt;

26 June: Last day to purchase conference dinner tickets
&lt;/li&gt;&lt;li&gt;

9 July: Last day to order conference t-shirts
&lt;/li&gt;&lt;li&gt;

12 August: PyCon Australia 2016 begins!
&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;
&lt;b&gt;About PyCon Australia&lt;/b&gt;
&lt;/p&gt;&lt;p&gt;
PyCon Australia is the national conference for the Python programming community. The seventh PyCon Australia will be held on August 12-16 2016 in Melbourne, bringing together professional, student and enthusiast developers with a love for programming in Python. PyCon Australia informs the country’s developers with presentations by experts and core developers of Python, as well as the libraries and frameworks that they rely on.
&lt;/p&gt;&lt;p&gt;

To find out more about PyCon Australia 2016, visit our website at &lt;a href=&quot;http://pycon-au.org&quot;&gt;pycon-au.org&lt;/a&gt;, follow us at @pyconau or e-mail us at contact@pycon-au.org.
&lt;/p&gt;&lt;p&gt;

PyCon Australia is presented by Linux Australia (&lt;a href=&quot;http://www.linux.org.au&quot;&gt;www.linux.org.au&lt;/a&gt;) and acknowledges the support of our Platinum Sponsors, DevDemand.co and IRESS; and our Gold sponsors, Google Australia and Optiver. For full details of our sponsors, see our website.
&lt;/p&gt;</description>
	<pubDate>Sun, 22 May 2016 22:52:24 +0000</pubDate>
</item>
<item>
	<title>Mikko Ohtamaa: Python standard logging pattern</title>
	<guid>https://opensourcehacker.com/2016/05/22/python-standard-logging-pattern/</guid>
	<link>https://opensourcehacker.com/2016/05/22/python-standard-logging-pattern/</link>
	<description>&lt;div id=&quot;introduction&quot; class=&quot;section&quot;&gt;
&lt;p&gt;(&lt;a href=&quot;http://websauna.org/docs/narrative/local-development/logging.html&quot;&gt;this article originally appeared in Websauna documentation&lt;/a&gt;)&lt;/p&gt;
&lt;h2 id=&quot;Introduction&quot;&gt;1. &lt;a class=&quot;toc-backref&quot; href=&quot;http://opensourcehacker.com/category/python/feed/#id1&quot;&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Python standard library provides &lt;a class=&quot;reference external&quot; title=&quot;(in Python v3.5)&quot; href=&quot;http://docs.python.org/3/library/logging.html#module-logging&quot;&gt;&lt;code class=&quot;xref py py-mod docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;logging&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; module as a de facto solution for libraries and applications to log their behavior. &lt;em&gt;logging&lt;/em&gt; is extensively used by &lt;a href=&quot;https://websauna.org&quot;&gt;Websauna&lt;/a&gt;, &lt;a class=&quot;reference internal&quot; href=&quot;http://opensourcehacker.com/category/reference/glossary.html#term-pyramid&quot;&gt;&lt;span class=&quot;xref std std-term&quot;&gt;Pyramid&lt;/span&gt;&lt;/a&gt;, &lt;a class=&quot;reference internal&quot; href=&quot;http://opensourcehacker.com/category/reference/glossary.html#term-sqlalchemy&quot;&gt;&lt;span class=&quot;xref std std-term&quot;&gt;SQLAlchemy&lt;/span&gt;&lt;/a&gt; and other Python packages.&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Python logging subsystem can be configured using external configuration file and the logging configuration format is &lt;a class=&quot;reference external&quot; href=&quot;https://docs.python.org/3.6/library/logging.config.html#logging-config-fileformat&quot;&gt;specified in Python standard library&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Python logger can be individually turned on, off and their verbosity adjusted on per module basis. For example by default, Websauna development server sets SQLALchemy logging level to &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;INFO&lt;/span&gt;&lt;/code&gt; instead of &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;DEBUG&lt;/span&gt;&lt;/code&gt; to avoid flooding the console with verbose SQL logs. However if you are debugging issues related to a database you might want to set the SQLAlchemy logging back to &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;INFO&lt;/span&gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Logging is preferred diagnose method over print statements cluttered around source code.. Well designed logging calls can be left in the source code and later turned back on if the problems must be diagnosed further.&lt;/li&gt;
&lt;li&gt;Python logging output can be directed to console, file, rotating file, syslog, remote server, email, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;log-colorization&quot; class=&quot;section&quot;&gt;
&lt;h2 id=&quot;Log_colorization&quot;&gt;2. &lt;a class=&quot;toc-backref&quot; href=&quot;http://opensourcehacker.com/category/python/feed/#id2&quot;&gt;Log colorization&lt;/a&gt;&lt;/h2&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Websauna uses &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/laysakura/rainbow_logging_handler&quot;&gt;rainbow_logging_handler&lt;/a&gt; which colorizes the logs, making it easier to read them in the console of the development web server.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img class=&quot;alignnone wp-image-3091 size-large&quot; src=&quot;https://opensourcehacker.com/wp-content/uploads/2016/05/logging-1024x399.png&quot; alt=&quot;logging&quot; width=&quot;584&quot; height=&quot;228&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;standard-logging-pattern&quot; class=&quot;section&quot;&gt;
&lt;h2 id=&quot;Standard_logging_pattern&quot;&gt;3. &lt;a class=&quot;toc-backref&quot; href=&quot;http://opensourcehacker.com/category/python/feed/#id3&quot;&gt;Standard logging pattern&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A common logging pattern in Python is:&lt;/p&gt;
&lt;pre class=&quot;prettify prettyprint lang-py&quot;&gt;import logging


logger = logging.getLogger(__name__)


def my_view(request):
    logger.debug(&quot;my_view got request: %s&quot;, request)
    logger.info(&quot;my_view got request: %s&quot;, request)
    logger.error(&quot;my_view got request: %s and BAD STUFF HAPPENS&quot;, request)

    try:
        raise RuntimeError(&quot;OH NOES&quot;)
    except Exception as e:
        # Let's log full traceback even when we ignore this exception
        # and it's not risen again
        logger.exception(e)&lt;/pre&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;This names a logger based on a module so you can switch logger on/off on module basis.&lt;/li&gt;
&lt;li&gt;Pass logged objects to &lt;a class=&quot;reference external&quot; title=&quot;(in Python v3.5)&quot; href=&quot;http://docs.python.org/3/library/logging.html#logging.Logger.debug&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;logging.Logger.debug()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; and co. as full and let the logger handle the string formatting. This allows intelligent display of logged objects when using non-console logging solutions like &lt;a class=&quot;reference internal&quot; href=&quot;http://opensourcehacker.com/category/reference/glossary.html#term-sentry&quot;&gt;&lt;span class=&quot;xref std std-term&quot;&gt;Sentry&lt;/span&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Use &lt;a class=&quot;reference external&quot; title=&quot;(in Python v3.5)&quot; href=&quot;http://docs.python.org/3/library/logging.html#logging.Logger.exception&quot;&gt;&lt;code class=&quot;xref py py-meth docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;logging.Logger.exception()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; to report exceptions. This will record the full traceback of the exception and not just the error message.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please note that although this logging pattern is common, it’s not a universal solution. For example if you are creating third party APIs, you might want to pass the logger to a class instance of an API, so that the API consumer can take over the logger setup and there is no inversion of control.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;changing-logging-level-using-ini-settings&quot; class=&quot;section&quot;&gt;
&lt;h2 id=&quot;Changing_logging_level_using_INI_settings&quot;&gt;4. &lt;a class=&quot;toc-backref&quot; href=&quot;http://opensourcehacker.com/category/python/feed/#id4&quot;&gt;Changing logging level using INI settings&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Websauna defines development web server log levels in its core &lt;a class=&quot;reference internal&quot; href=&quot;http://opensourcehacker.com/category/reference/config.html#development-ini&quot;&gt;&lt;span class=&quot;std std-ref&quot;&gt;development.ini&lt;/span&gt;&lt;/a&gt;. Your Websauna application inherits settings from this file and can override them for each logger in the &lt;code class=&quot;docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;conf/development.ini&lt;/span&gt;&lt;/code&gt; file of your application.&lt;/p&gt;
&lt;p&gt;For example to set &lt;a class=&quot;reference internal&quot; href=&quot;http://opensourcehacker.com/category/reference/glossary.html#term-sqlalchemy&quot;&gt;&lt;span class=&quot;xref std std-term&quot;&gt;SQLAlchemy&lt;/span&gt;&lt;/a&gt; and &lt;code class=&quot;xref py py-mod docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;transaction&lt;/span&gt;&lt;/code&gt; logging level to more verbose you can do:&lt;/p&gt;
&lt;div class=&quot;highlight-ini&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;span class=&quot;k&quot;&gt;[logger_sqlalchemy]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;DEBUG&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;[logger_transaction]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;DEBUG&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Now console is flooded with &lt;em&gt;very&lt;/em&gt; verbose logging:&lt;/p&gt;
&lt;div class=&quot;highlight-default&quot;&gt;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;05&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;39&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;429&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqlalchemy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Engine&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_begin_impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BEGIN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;implicit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;05&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;39&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;429&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;txn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123145312813056&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;05&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;39&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;429&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqlalchemy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Engine&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_execute_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users_password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users_uuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users_username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users_email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;created_at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users_created_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;updated_at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users_updated_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activated_at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users_activated_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enabled&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users_enabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last_login_at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users_last_login_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last_login_ip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users_last_login_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users_user_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last_auth_sensitive_operation_at&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users_last_auth_sensitive_operation_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activation_id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users_activation_id&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;initialization-loggers-from-ini-file&quot; class=&quot;section&quot;&gt;
&lt;h2 id=&quot;Initialization_loggers_from_INI_file&quot;&gt;5. &lt;a class=&quot;toc-backref&quot; href=&quot;http://opensourcehacker.com/category/python/feed/#id5&quot;&gt;Initialization loggers from INI file&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you need to initialize loggers in your own applications see &lt;a class=&quot;reference internal&quot; title=&quot;websauna.system.devop.cmdline.setup_logging&quot; href=&quot;http://opensourcehacker.com/category/api/websauna.system.devop.cmdline.html#websauna.system.devop.cmdline.setup_logging&quot;&gt;&lt;code class=&quot;xref py py-func docutils literal&quot;&gt;&lt;span class=&quot;pre&quot;&gt;websauna.system.devop.cmdline.setup_logging()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; for how Websauna picks up loggers from &lt;span class=&quot;xref std std-ref&quot;&gt;INI&lt;/span&gt; configuration file.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;more-information&quot; class=&quot;section&quot;&gt;
&lt;h2 id=&quot;More_information&quot;&gt;6. &lt;a class=&quot;toc-backref&quot; href=&quot;http://opensourcehacker.com/category/python/feed/#id6&quot;&gt;More information&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/websauna/websauna/blob/master/websauna/system/core/views/internalservererror.py&quot;&gt;How Websauna logs username and email for every internal server error&lt;/a&gt;. It’s impressive service if your devops teams calls a customer on a second an error happens and guide the customer around the error. As a bonus if using &lt;a class=&quot;reference internal&quot; href=&quot;http://opensourcehacker.com/category/reference/glossary.html#term-sentry&quot;&gt;&lt;span class=&quot;xref std std-term&quot;&gt;Sentry&lt;/span&gt;&lt;/a&gt; you will see the &lt;a class=&quot;reference external&quot; href=&quot;http://gravatar.com&quot;&gt;Gravatar profile image&lt;/a&gt; of the user when viewing the exception.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://pythonhosted.org/Logbook/&quot;&gt;Logbook&lt;/a&gt; is an alternative for Python standard library logging if performance is critical or the application has more complex logging requirements .&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://reinout.vanrees.org/weblog/2015/06/05/logging-formatting.html&quot;&gt;Discussion about log message formatting and why we are still using old style string formatting&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://structlog.readthedocs.io/en/stable/index.html&quot;&gt;structlog package&lt;/a&gt; &amp;#8211; add context to your logged messages like user id or HTTP request URL.&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&quot;signature&quot;&gt;
 &lt;a href=&quot;http://feeds.feedburner.com/OpenSourceHacker&quot; rel=&quot;alternate&quot; type=&quot;application/rss+xml&quot;&gt;&lt;img valign=&quot;middle&quot; src=&quot;http://www.feedburner.com/fb/images/pub/feed-icon16x16.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.feedburner.com/OpenSourceHacker&quot; rel=&quot;alternate&quot; type=&quot;application/rss+xml&quot;&gt;Subscribe to RSS feed&lt;/a&gt; &lt;a href=&quot;http://twitter.com/moo9000&quot;&gt; &lt;img valign=&quot;middle&quot; src=&quot;http://opensourcehacker.com/wp-content/uploads/twitter-24.png&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://twitter.com/moo9000&quot;&gt;Follow me on Twitter&lt;/a&gt; 
 &lt;a href=&quot;https://www.facebook.com/pages/Open-Source-Hacker/181710458567630&quot;&gt; &lt;img valign=&quot;middle&quot; src=&quot;http://opensourcehacker.com/wp-content/uploads/facebook-24.png&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://www.facebook.com/pages/Open-Source-Hacker/181710458567630&quot;&gt;Follow me on Facebook&lt;/a&gt; &lt;a href=&quot;https://plus.google.com/103323677227728078543/&quot;&gt;&lt;img valign=&quot;middle&quot; src=&quot;http://opensourcehacker.com/wp-content/uploads/googleplus.png&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;https://plus.google.com/103323677227728078543/&quot;&gt;Follow me Google+&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Sun, 22 May 2016 19:30:26 +0000</pubDate>
</item>
<item>
	<title>Programando Ciência: Complex scatter plots on Python [PART III] – Inserting labels into elements and defining more than one legend</title>
	<guid></guid>
	<link></link>
	<description>Hey scientist! How is it going? Do you remember our scatter plot based on IBGE [1] data? In the last post of this series we&amp;#8217;ll make it even better, inserting labels indicating the states and defining two legends related to the regions and the population. Now the plot will be awesome! Let&amp;#8217;s do this! Do [&amp;#8230;]&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;https://pixel.wp.com/b.gif?host=programandociencia.com&amp;blog=80926902&amp;post=945&amp;subd=programandociencia&amp;ref=&amp;feed=1&quot; width=&quot;1&quot; height=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 22 May 2016 18:32:47 +0000</pubDate>
</item>
<item>
	<title>Weekly Python Chat: PyCon Sprints</title>
	<guid>http://ccst.io/e/sprints</guid>
	<link>http://ccst.io/e/sprints</link>
	<description>&lt;p&gt;If you're interested in contributing to open source but you've never been to a PyCon sprint, join this chat and &lt;strong&gt;learn what the PyCon sprints are really like&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We'll chat with first-time contributors and experienced contributors about their PyCon sprint experience.&lt;/p&gt;</description>
	<pubDate>Sun, 22 May 2016 18:00:00 +0000</pubDate>
</item>
<item>
	<title>Abu Ashraf Masnun: Building a Facebook Messenger Bot with Python</title>
	<guid>http://masnun.com/2016/05/22/building-a-facebook-messenger-bot-with-python.html</guid>
	<link>http://masnun.com/2016/05/22/building-a-facebook-messenger-bot-with-python.html</link>
	<description>&lt;p&gt;Facebook now has the Messenger Platform which allows us to build bots which can accept messages from users and respond to them. In this tutorial, we shall see how we can build a bot and add it to one of our pages so that the users can interact with the bot by sending messages to the page. &lt;/p&gt;
&lt;p&gt;To get started, we have three requirements to fulfill: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We need a Facebook Page&lt;/li&gt;
&lt;li&gt;We need a Facebook App&lt;/li&gt;
&lt;li&gt;We need a webhook / callback URL to accept incoming messages&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I am assuming you already have a Facebook Page. If you don&amp;#8217;t, go ahead and create one. It&amp;#8217;s very simple. &lt;/p&gt;
&lt;h3&gt; Creating and Configuring The Facebook App &lt;/h3&gt;
&lt;p&gt;(1) First, we create a generic facebook app. We need to provide the name, namespace, category, contact email. Simple and straightforward. This is how it looks for me: &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://masnun.com/wp-content/uploads/2016/05/Screen-Shot-2016-05-22-at-10.01.03-PM.png&quot; alt=&quot;Create a New FB App&quot; width=&quot;724&quot; height=&quot;506&quot; class=&quot;aligncenter size-full wp-image-3082&quot; /&gt;. &lt;/p&gt;
&lt;p&gt;(2) Now we have to browse the &amp;#8220;Add Product&amp;#8221; section and add &amp;#8220;Messenger&amp;#8221;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://masnun.com/wp-content/uploads/2016/05/Screen_Shot_2016-05-22_at_10_04_33_PM-1024x490.png&quot; alt=&quot;Add Messenger&quot; width=&quot;687&quot; height=&quot;329&quot; class=&quot;aligncenter size-large wp-image-3084&quot; /&gt;&lt;/p&gt;
&lt;p&gt;(3) Generate access token for a Page you manage. A popup will open asking you for permissions. Grant the permission and you will soon see the access token for that page. Please take a note of this token. We shall use it later send messages to the users on behalf of the page. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://masnun.com/wp-content/uploads/2016/05/Screen_Shot_2016-05-22_at_10_08_32_PM-1024x444.png&quot; alt=&quot;&quot; width=&quot;687&quot; height=&quot;298&quot; class=&quot;aligncenter size-large wp-image-3085&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Next, click the &amp;#8220;Webhooks&amp;#8221; section. &lt;/p&gt;
&lt;p&gt;(4) Before we can setup a webhook, we need to setup an URL which is publicly accessible on the internet. The URL must have SSL (that is it needs to be https). To meet this requirement and set up a local dev environment, we setup a quick flask app on our local machine. &lt;/p&gt;
&lt;p&gt;Install Flask from PyPi using &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;pip install Flask&lt;/pre&gt;&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Facebook will send a &lt;code&gt;GET&lt;/code&gt; request to the callback URL we provide. The request will contain a custom secret we can add (while setting up the webhook) and a challenge code from Facebook. They expect us to output the challenge code to verify ourselves. To do so, we write a quick &lt;code&gt;GET&lt;/code&gt; handler using Flask. &lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;## Filename: server.py 

from flask import Flask, request

app = Flask(__name__)

@app.route('/', methods=['GET'])
def handle_verification():
    return request.args['hub.challenge']

if __name__ == '__main__':
    app.run(debug=True)&lt;/pre&gt;&lt;p&gt; &lt;/p&gt;
&lt;p&gt;We run the local server using &lt;code&gt;python server.py&lt;/code&gt;. The app will launch at port 5000 by default. Next we use &lt;code&gt;ngrok&lt;/code&gt; to expose the server to the internet. &lt;a href=&quot;https://ngrok.com/&quot; target=&quot;_blank&quot;&gt;ngrok&lt;/a&gt; is a fantastic tool and you should seriously give it a try for running and debugging webhooks/callback urls on your local machine. &lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;ngrok http 5000&lt;/pre&gt;&lt;p&gt; &lt;/p&gt;
&lt;p&gt;With that command, we will get an address like &lt;code&gt;https://ac433506.ngrok.io&lt;/code&gt;. Copy that url and paste it in the Webhook setup popup. Checkmark the events we&amp;#8217;re interested in. I check them all. Then we input a secret, which our code doesn&amp;#8217;t care about much. So just add anything you like. The popup now looks like this: &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://masnun.com/wp-content/uploads/2016/05/Screen-Shot-2016-05-22-at-10.27.18-PM.png&quot; alt=&quot;&quot; width=&quot;801&quot; height=&quot;379&quot; class=&quot;aligncenter size-full wp-image-3087&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Click &amp;#8220;Verify and Save&amp;#8221;. If the verification succeeds, the popup will close and you will be back to the previous screen. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://masnun.com/wp-content/uploads/2016/05/Screen_Shot_2016-05-22_at_10_29_34_PM.png&quot; alt=&quot;&quot; width=&quot;792&quot; height=&quot;283&quot; class=&quot;aligncenter size-full wp-image-3088&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Select a Page again and click &amp;#8220;Subscribe&amp;#8221;. Now our app should be added to the page we selected. Please note, if we haven&amp;#8217;t generated an access token for that page in the earlier step, the subscription will fail. So make sure we have an access token generated for that page. &lt;/p&gt;
&lt;h3&gt; Handling Messages &lt;/h3&gt;
&lt;p&gt;Now every time someone sends a message to the &amp;#8220;Masnun&amp;#8221; page, Facebook will make a &lt;code&gt;POST&lt;/code&gt; request to our callback url. So we need to write a &lt;code&gt;POST&lt;/code&gt; handler for that url. We also need respond back to the user using the Graph API. For that we would need to use the awesome &lt;code&gt;requests&lt;/code&gt; module. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;pip install requests&lt;/pre&gt;&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s the code for accepting incoming messages and sending them a reply: &lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;from flask import Flask, request
import requests

app = Flask(__name__)

ACCESS_TOKEN = &quot;EAAP9MMaGh1cBAHS7jZCnuQgm2GWx5grLraIElFlWlIw2r3Afb34m2c2rP0xdkkkKEeiBOykGINAP0tScwmL5NNBJQN9ayPCuq13syvWocmbYZA7BXL86FsZCyZBxTmkgYYp8MDulLc1Tx70FGdU5ebQZAJV28nMkZD&quot;


def reply(user_id, msg):
    data = {
        &quot;recipient&quot;: {&quot;id&quot;: user_id},
        &quot;message&quot;: {&quot;text&quot;: msg}
    }
    resp = requests.post(&quot;https://graph.facebook.com/v2.6/me/messages?access_token=&quot; + ACCESS_TOKEN, json=data)
    print(resp.content)


@app.route('/', methods=['POST'])
def handle_incoming_messages():
    data = request.json
    sender = data['entry'][0]['messaging'][0]['sender']['id']
    message = data['entry'][0]['messaging'][0]['message']['text']
    reply(sender, message[::-1])

    return &quot;ok&quot;


if __name__ == '__main__':
    app.run(debug=True)&lt;/pre&gt;&lt;p&gt; &lt;/p&gt;
&lt;p&gt;The code here accepts a message, retrieves the user id and the message content. It reverses the message and sends back to the user. For this we use the &lt;code&gt;ACCESS_TOKEN&lt;/code&gt; we generated before hand. The incoming request must be responded with a status code 200 to acknowledge the message. Otherwise Facebook will try the message a few more times and then disable the webhook. So sending a http status code 200 is important. We just output &amp;#8220;ok&amp;#8221; to do so. &lt;/p&gt;
&lt;p&gt;You can now send a message to your page and see if it responds correctly. Check out Flask&amp;#8217;s and ngrok&amp;#8217;s logs to debug any issues you might face. &lt;/p&gt;
&lt;p&gt;You can download the sample code from here: &lt;a href=&quot;https://github.com/masnun/fb-bot&quot; target=&quot;_blank&quot;&gt;https://github.com/masnun/fb-bot&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Sun, 22 May 2016 16:44:28 +0000</pubDate>
</item>
<item>
	<title>PyCon Australia: Tickets now on sale!</title>
	<guid>http://2016.pycon-au.org/media/news/39</guid>
	<link>http://2016.pycon-au.org/media/news/39</link>
	<description>&lt;p&gt;
We are delighted to announce that online registration is now open for PyCon Australia 2016. The seventh PyCon Australia is being held in Melbourne, Victoria from August 12th – 16th at the Melbourne Convention and Exhibition Centre, and will draw hundreds of Python developers, enthusiasts and students from Australasia and afar.
&lt;/p&gt;
&lt;p&gt;
Starting today, early bird offers are up for grabs. To take advantage of these discounted ticket rates, be among the first 90 to register. Early bird registration starts from $60 for full-time students, $190 for enthusiasts and $495 for professionals. Offers this good won’t last long, so we recommend registering  right away.
&lt;/p&gt;
&lt;p&gt;
We strongly encourage attendees to organise their accommodation as early as possible, as demand for cheaper rooms is very strong during the AFL season.
&lt;/p&gt;
&lt;p&gt;
PyCon Australia has endeavoured to keep tickets as affordable as possible. &lt;a href=&quot;https://2016.pycon-au.org/about/financial_assistance&quot;&gt;Financial assistance is also available&lt;/a&gt;. We are able to make such offers thanks to our Sponsors and Contributors.
&lt;/p&gt;
&lt;p&gt;
To begin the registration process, and find out more about each level
of ticket, visit &lt;a href=&quot;https://2016.pycon-au.org/register/prices&quot;&gt;https://2016.pycon-au.org/register/prices&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;

&lt;h2&gt;Important Dates to Help You Plan&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt; 22 May: Registration opens - ‘Early bird’ prices for the first 90 tickets&lt;/li&gt;
&lt;li&gt; 17 June: Last day to apply for &lt;a href=&quot;https://2016.pycon-au.org/about/financial_assistance&quot;&gt;financial assistance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; 26 June: Last day to purchase conference dinner tickets&lt;/li&gt;
&lt;li&gt; 9 July: Last day to order conference t-shirts&lt;/li&gt;
&lt;li&gt; 12 August: PyCon Australia 2016 begins!&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;</description>
	<pubDate>Sun, 22 May 2016 13:28:12 +0000</pubDate>
</item>
<item>
	<title>BangPypers: Talks About Mesh Networks - 2016 May Meetup</title>
	<guid>http://bangalore.python.org.in/blog/2016/05/21/talks/</guid>
	<link>http://bangalore.python.org.in/blog/2016/05/21/talks/</link>
	<description>&lt;p&gt;&lt;a href=&quot;http://www.meetup.com/BangPypers/events/197867222/&quot;&gt;May meetup&lt;/a&gt; happened at the &lt;a href=&quot;https://bluejeans.com/&quot;&gt;Blue Jeans&lt;/a&gt; in Prestige tech park. 35 people attended the event. This time we had a series of talks about Mesh networks.&lt;/p&gt;

&lt;p&gt;Prasanna gave first talk. He explained about how internet works, what is a mesh network and why we need one. He also explained how mesh networks were used during chennai floods for communication when there was no other way to communicate. He also explained advantages of setting up a mesh network in rural areas and challenges in setting up them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://photos4.meetupstatic.com/photos/event/4/f/0/9/highres_450260233.jpeg&quot; alt=&quot;talk1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Second talk was given by Ganesh. He explained about the hardware for Mesh networks. He started with basics of routers, how router works, their design and how we can take complete control of it using OpenWRT. He also explained FM, design of various antennas and showed several softwares available for it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://photos1.meetupstatic.com/photos/event/4/f/b/c/highres_450260412.jpeg&quot; alt=&quot;talk2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://photos1.meetupstatic.com/photos/event/5/0/9/5/highres_450260629.jpeg&quot; alt=&quot;talk21&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://photos4.meetupstatic.com/photos/event/5/0/5/3/highres_450260563.jpeg&quot; alt=&quot;talk22&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Third talk was by Surya. He talked about P2P software applications. He explained why we need a p2p approach. Later he explained about several interesting projects Zeronet, ZeroConf, Avahi, Serval Mesh, Rumble, Murmur, opentracker, etc. Some of them are built with Python.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://photos1.meetupstatic.com/photos/event/5/0/c/9/highres_450260681.jpeg&quot; alt=&quot;talk3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Slides about talks are available &lt;a href=&quot;https://github.com/suriyadeepan/meshnet-guide-slides/files/275878/MeshGuide_BangPypers.pdf&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://github.com/lrmodesgh/Presentation/blob/master/0%20Main%20Subjects/9%20Radio%20Mesh%20Networking%20%26%20Distributed%20Systems/Radio%20Mesh%20Networking%20and%20Distributed%20Systems.pdf&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;
At the end, there was a flash talk by Saurabh about defaultdict(collections). He explained how to implement a recursive defaultdict(a tree) and use cases of it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://photos4.meetupstatic.com/photos/event/5/6/9/4/600_450262164.jpeg&quot; alt=&quot;talk4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bluejeans &lt;a href=&quot;https://a2m.bluejeans.com/a2m/live-event/yl86464&quot;&gt;livestreamed the event&lt;/a&gt;. Several people who couldn't come to venue watched it online.&lt;/p&gt;

&lt;p&gt;In case if You're interested to give talk or a workshop, please leave comment in the &lt;a href=&quot;http://www.meetup.com/BangPypers/&quot;&gt;meetup page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks to speakers and BlueJeans for hosting &amp;amp; streaming the event.&lt;/p&gt;</description>
	<pubDate>Sat, 21 May 2016 17:31:00 +0000</pubDate>
</item>
<item>
	<title>Podcast.__init__: Episode 58 - Wagtail with Tom Dyson</title>
	<guid>http://podcastinit.podbean.com/e/episode-58-wagtail-with-tom-dyson/</guid>
	<link>http://podcastinit.podbean.com/e/episode-58-wagtail-with-tom-dyson/</link>
	<description>&lt;p&gt;Visit our &lt;a href=&quot;http://pythonpodcast.com&quot;&gt;site&lt;/a&gt; to sign up for the newsletter, explore past episodes, subscribe to the show, and help support our work.&lt;/p&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;If you are operating a website that needs to publish and manage content on a regular basis, a CMS (Content Management System) becomes the obvious choice for reducing your workload. There are a plethora of options available, but if you are looking for a solution that leverages the power of Python and exposes its flexibility then you should take a serious look at Wagtail. In this episode Tom Dyson explains how Wagtail came to be created, what sets it apart from other options, and when you should implement it for your projects.&lt;/p&gt;
&lt;h3&gt;Brief Introduction&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Hello and welcome to Podcast.__init__, the podcast about Python and the people who make it great.&lt;/li&gt;
&lt;li&gt;I would like to thank everyone who has donated to the show. Your contributions help us make the show sustainable. For details on how to support the show you can visit our site at &lt;a href=&quot;http://pythonpodcast.com&quot;&gt;pythonpodcast.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Linode is sponsoring us this week. Check them out at &lt;a href=&quot;http://linode.com/podcastinit&quot;&gt;linode.com/podcastinit&lt;/a&gt; and get a $20 credit to try out their fast and reliable Linux virtual servers for your next project&lt;/li&gt;
&lt;li&gt;We also have a new sponsor this week. Rollbar is a service for tracking and aggregating your application errors so that you can find and fix the bugs in your application before your users notice they exist. Use the link &lt;a href=&quot;https://rollbar.com/podcastinit&quot;&gt;rollbar.com/podcastinit&lt;/a&gt; to get 90 days and 300,000 errors for free on their bootstrap plan.&lt;/li&gt;
&lt;li&gt;Visit our site to subscribe to our show, sign up for our newsletter, read the show notes, and get in touch.&lt;/li&gt;
&lt;li&gt;To help other people find the show you can leave a review on &lt;a href=&quot;https://itunes.apple.com/us/podcast/podcast.-init/id981834425?mt=2&amp;uo=6&amp;at=&amp;ct=&quot;&gt;iTunes&lt;/a&gt;, or &lt;a href=&quot;https://play.google.com/music/m/I7ogju4xv6adasgqz6545jndgsy?t=Podcastinit_-_Python_and_the_people_who_make_it_great&quot;&gt;Google Play Music&lt;/a&gt;, and tell your friends and co-workers&lt;/li&gt;
&lt;li&gt;Join our community! Visit &lt;a href=&quot;https://discourse.pythonpodcast.com&quot;&gt;discourse.pythonpodcast.com&lt;/a&gt; for your opportunity to find out about upcoming guests, suggest questions, and propose show ideas.&lt;/li&gt;
&lt;li&gt;Your hosts as usual are Tobias Macey and Chris Patti&lt;/li&gt;
&lt;li&gt;Today we are interviewing Tom Dyson about Wagtail, a modern and sophisticated CMS for Django.&lt;/li&gt;
&lt;/ul&gt;&lt;div class=&quot;well&quot;&gt;&lt;a href=&quot;http://linode.com/podcastinit&quot;&gt;&lt;img src=&quot;http://podcastinit.podbean.com/mf/web/tdegpr/linode-banner-sponsor-large.png&quot; alt=&quot;Linode Sponsor Banner&quot; /&gt;&lt;/a&gt;

&lt;p&gt;Use the promo code &lt;strong&gt;podcastinit20&lt;/strong&gt; to get a $20 credit when you sign up!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;well&quot;&gt;&lt;a href=&quot;https://rollbar.com/podcastinit&quot;&gt;&lt;img src=&quot;http://podcastinit.podbean.com/mf/web/wvhm79/rollbar-large-logo.png&quot; alt=&quot;Rollbar Logo&quot; /&gt;&lt;/a&gt;

&lt;p&gt;I’m excited to tell you about a new sponsor of the show, Rollbar.&lt;/p&gt;
&lt;p&gt;One of the frustrating things about being a developer, is dealing with errors… &lt;em&gt;(sigh)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Relying on users to report errors&lt;/li&gt;
&lt;li&gt;Digging thru log files trying to debug issues&lt;/li&gt;
&lt;li&gt;A million alerts flooding your inbox ruining your day…&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;With Rollbar’s full-stack error monitoring, you get the context, insights and control you need to find and fix bugs faster. It’s easy to get started tracking the errors and exceptions in your stack.You can start tracking production errors and deployments in 8 minutes - or less, and Rollbar works with all major languages and frameworks, including Ruby, Python, Javascript, PHP, Node, iOS, Android and more.You can integrate Rollbar into your existing workflow such as sending error alerts to Slack or Hipchat, or automatically create new issues in Github, JIRA, Pivotal Tracker etc.&lt;/p&gt;
&lt;p&gt;We have a special offer for Podcast.__init__ listeners. Go to &lt;a href=&quot;https://rollbar.com/podcastinit&quot;&gt;rollbar.com/podcastinit&lt;/a&gt;, signup, and get the Bootstrap Plan free for 90 days. That’s 300,000 errors tracked for free.Loved by developers at awesome companies like Heroku, Twilio, Kayak, Instacart, Zendesk, Twitch and more. Help support Podcast.__init__ and give Rollbar a try a today. Go to &lt;a href=&quot;https://rollbar.com/podcastinit&quot;&gt;rollbar.com/podcastinit&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;Interview with Tom Dyson&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Introductions&lt;/li&gt;
&lt;li&gt;How did you get introduced to Python? - Chris&lt;/li&gt;
&lt;li&gt;Can you start by explaining what a content management system is and why they are useful? - Tobias&lt;/li&gt;
&lt;li&gt;How did the Wagtail project get started and what makes it stand out from other comparable offerings? - Tobias&lt;/li&gt;
&lt;li&gt;What made you choose Django as the basis for the project as opposed to another framework or language such as Pyramid, Flask, or Rails? - Tobias&lt;/li&gt;
&lt;li&gt;What is your target user and are there any situations in which you would encourage someone to use a different CMS? - Tobias&lt;/li&gt;
&lt;li&gt;Can you explain the software design approach that was taken with Wagtail and describe the challenges that have been overcome along the way? - Tobias&lt;/li&gt;
&lt;li&gt;How did you approach the project in a way to make the CMS feel well integrated into the other apps in a given Django project so that it doesn’t feel like an afterthought? - Tobias&lt;/li&gt;
&lt;li&gt;For someone who wants to get started with using Wagtail, what does that experience look like? - Tobias&lt;/li&gt;
&lt;li&gt;What are some of the features that are unique to Wagtail? - Tobias&lt;/li&gt;
&lt;li&gt;Given that Wagtail is such a flexible tool, what are some of the gotchas that people should watch out for as they are working on a new site? - Tobias&lt;/li&gt;
&lt;li&gt;Does Wagtail have any built-in support for multi-tenancy? - Tobias&lt;/li&gt;
&lt;li&gt;Does Wagtail have a plugin system to allow developers to create extensions to the base CMS? - Tobias&lt;/li&gt;
&lt;li&gt;Having built such a sizable plugin with deep integrations to Django, what are some of the shortcomings in the framework that you would like to see improved? - Tobias&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Keep In Touch&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://twitter.com/wagtailcms&quot;&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wagtail.io&quot;&gt;Site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/torchbox/wagtail&quot;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Picks&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;Tobias
&lt;ul&gt;&lt;li&gt;Pumpkin Pie&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Tom
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.hasbean.co.uk/collections/africa-ethiopia&quot;&gt;Hasbean Ethiopian Coffee&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://amzn.to/1XHG9UK&quot;&gt;Hario V60&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;Links&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://www.rca.ac.uk/&quot;&gt;Royal College of Arts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.simonwillison.net/&quot;&gt;Simon Willison’s Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.vagrantup.com/&quot;&gt;Vagrant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.willowprojectstl.org/&quot;&gt;Willow project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/torchbox/django-modelcluster&quot;&gt;Django Model Cluster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.divio.com/en/&quot;&gt;Divio&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;The intro and outro music is from Requiem for a Fish &lt;a href=&quot;http://freemusicarchive.org/music/The_Freak_Fandango_Orchestra/&quot;&gt;The Freak Fandango Orchestra&lt;/a&gt;  / &lt;a href=&quot;http://creativecommons.org/licenses/by-sa/3.0/&quot;&gt;CC BY-SA&lt;/a&gt;&lt;/p&gt;Visit our site to sign up for the newsletter, explore past episodes, subscribe to the show, and help support our work.Summary
If you are operating a website that needs to publish and manage content on a regular basis, a CMS (Content Management System) becomes the obvious choice for reducing your workload. There are a plethora of options available, but if you are looking for a solution that leverages the power of Python and exposes its flexibility then you should take a serious look at Wagtail. In this episode Tom Dyson explains how Wagtail came to be created, what sets it apart from other options, and when you should implement it for your projects.Brief IntroductionHello and welcome to Podcast.__init__, the podcast about Python and the people who make it great.I would like to thank everyone who has donated to the show. Your contributions help us make the show sustainable. For details on how to support the show you can visit our site at pythonpodcast.comLinode is sponsoring us this week. Check them out at linode.com/podcastinit and get a $20 credit to try out their fast and reliable Linux virtual servers for your next projectWe also have a new sponsor this week. Rollbar is a service for tracking and aggregating your application errors so that you can find and fix the bugs in your application before your users notice they exist. Use the link rollbar.com/podcastinit to get 90 days and 300,000 errors for free on their bootstrap plan.Visit our site to subscribe to our show, sign up for our newsletter, read the show notes, and get in touch.To help other people find the show you can leave a review on iTunes, or Google Play Music, and tell your friends and co-workersJoin our community! Visit discourse.pythonpodcast.com for your opportunity to find out about upcoming guests, suggest questions, and propose show ideas.Your hosts as usual are Tobias Macey and Chris PattiToday we are interviewing Tom Dyson about Wagtail, a modern and sophisticated CMS for Django.
Use the promo code podcastinit20 to get a $20 credit when you sign up!

I’m excited to tell you about a new sponsor of the show, Rollbar.
One of the frustrating things about being a developer, is dealing with errors… (sigh)Relying on users to report errorsDigging thru log files trying to debug issuesA million alerts flooding your inbox ruining your day...With Rollbar’s full-stack error monitoring, you get the context, insights and control you need to find and fix bugs faster. It's easy to get started tracking the errors and exceptions in your stack.You can start tracking production errors and deployments in 8 minutes - or less, and Rollbar works with all major languages and frameworks, including Ruby, Python, Javascript, PHP, Node, iOS, Android and more.You can integrate Rollbar into your existing workflow such as sending error alerts to Slack or Hipchat, or automatically create new issues in Github, JIRA, Pivotal Tracker etc.

We have a special offer for Podcast.__init__ listeners. Go to rollbar.com/podcastinit, signup, and get the Bootstrap Plan free for 90 days. That's 300,000 errors tracked for free.Loved by developers at awesome companies like Heroku, Twilio, Kayak, Instacart, Zendesk, Twitch and more. Help support Podcast.__init__ and give Rollbar a try a today. Go to rollbar.com/podcastinitInterview with Tom DysonIntroductionsHow did you get introduced to Python? - ChrisCan you start by explaining what a content management system is and why they are useful? - TobiasHow did the Wagtail project get started and what makes it stand out from other comparable offerings? - TobiasWhat made you choose Django as the basis for the project as opposed to another framework or language such as Pyramid, Flask, or Rails? - TobiasWhat is your target user and are there any situations in which you would encourage someone to use a different CMS? - TobiasCan you explain the software design approach that was taken with Wagtail and describe the challenges that have been overcome along the way? - T</description>
	<pubDate>Sat, 21 May 2016 16:23:05 +0000</pubDate>
</item>
<item>
	<title>EuroPython: PyData EuroPython 2016</title>
	<guid>http://blog.europython.eu/post/144694765622</guid>
	<link>http://blog.europython.eu/post/144694765622</link>
	<description>&lt;p&gt;We are excited to announce a complete &lt;a href=&quot;http://pydata.org/&quot; target=&quot;_blank&quot;&gt;PyData&lt;/a&gt; track at &lt;a href=&quot;https://ep2016.europython.eu/en/&quot; target=&quot;_blank&quot;&gt;EuroPython 2016&lt;/a&gt; in &lt;a href=&quot;https://ep2016.europython.eu/en/venue/bilbao/&quot; target=&quot;_blank&quot;&gt;Bilbao, Basque Country, Spain&lt;/a&gt;, from July 14-24.&lt;br /&gt;&lt;/p&gt;&lt;a href=&quot;https://ep2016.europython.eu/en/events/pydata/&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;image&quot; src=&quot;http://67.media.tumblr.com/fd95b3047efd27df089c892a01751afc/tumblr_inline_o7h16dH6vC1swlzyf_540.png&quot; /&gt;&lt;/a&gt;&lt;h3 class=&quot;center&quot;&gt;&lt;a href=&quot;https://ep2016.europython.eu/en/events/pydata/&quot; target=&quot;_blank&quot;&gt;PyData EuroPython 2016&lt;/a&gt;&lt;br /&gt;&lt;/h3&gt;&lt;p&gt;The &lt;a href=&quot;https://ep2016.europython.eu/en/events/pydata/&quot; target=&quot;_blank&quot;&gt;PyData track&lt;/a&gt; will be part of the EuroPython 2016 conference, so you won’t need to buy extra tickets to join.&lt;/p&gt;&lt;p&gt;We will have &lt;a href=&quot;https://ep2016.europython.eu/en/events/pydata/&quot; target=&quot;_blank&quot;&gt;more than 30 talks, 5 training and 2 poster sessions&lt;/a&gt; dedicated to PyData, mainly scheduled on Thursday 21st and Friday 22nd of July.&lt;/p&gt;&lt;p&gt;If you’d like to attend the PyData EuroPython 2016 track, please &lt;a href=&quot;https://ep2016.europython.eu/registration/&quot; target=&quot;_blank&quot;&gt;register for EuroPython 2016 soon&lt;/a&gt;.&lt;br /&gt;&lt;/p&gt;&lt;p&gt;With &lt;a href=&quot;http://blog.europython.eu/post/139346712217/europython-2016-sending-out-the-first&quot; target=&quot;_blank&quot;&gt;gravitational&lt;/a&gt; regards,&lt;br /&gt;
–&lt;br /&gt;&lt;a href=&quot;https://ep2016.europython.eu/en/team/&quot; target=&quot;_blank&quot;&gt;EuroPython 2016 Team&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;</description>
	<pubDate>Sat, 21 May 2016 10:03:46 +0000</pubDate>
</item>

</channel>
</rss>
